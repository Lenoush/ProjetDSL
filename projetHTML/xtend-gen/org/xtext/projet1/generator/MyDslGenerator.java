/**
 * generated by Xtext 2.25.0
 */
package org.xtext.projet1.generator;

import com.google.common.base.Objects;
import java.util.ArrayList;
import l3IA_ProjetHTML.CompareQuali;
import l3IA_ProjetHTML.CompareQuanti;
import l3IA_ProjetHTML.Dashboard;
import l3IA_ProjetHTML.FilterCompare;
import l3IA_ProjetHTML.FilterData;
import l3IA_ProjetHTML.FilterGroupBy;
import l3IA_ProjetHTML.FilterNotNull;
import l3IA_ProjetHTML.FonctionAgregation;
import l3IA_ProjetHTML.FonctionComparaisonQuali;
import l3IA_ProjetHTML.FonctionComparaisonQuanti;
import l3IA_ProjetHTML.GraphRealisation;
import l3IA_ProjetHTML.GraphUpdate;
import l3IA_ProjetHTML.TypeGraph;
import l3IA_ProjetHTML.UpdateCouleurGraph;
import l3IA_ProjetHTML.UpdateNameAxeX;
import l3IA_ProjetHTML.UpdateNameAxeY;
import l3IA_ProjetHTML.UpdateNameLegend;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IteratorExtensions.<EObject>head(resource.getAllContents());
    Dashboard prog = ((Dashboard) _head);
    String fileContent = "";
    fileContent = "#!usr/bin/env python3\n#Import Library\nimport pandas as pd\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots \n\n\n";
    int NbGraph = 0;
    EList<GraphRealisation> _ownedGraphRealisation = prog.getOwnedGraphRealisation();
    for (final GraphRealisation a : _ownedGraphRealisation) {
      int _NbGraph = NbGraph;
      NbGraph = (_NbGraph + 1);
    }
    String _fileContent = fileContent;
    String _translateStart = this.translateStart(NbGraph);
    fileContent = (_fileContent + _translateStart);
    String _fileContent_1 = fileContent;
    String _name = prog.getName();
    String _plus = ("fig.update_layout(title=\'" + _name);
    String _plus_1 = (_plus + "\', showlegend=True)");
    fileContent = (_fileContent_1 + _plus_1);
    int i = 0;
    int rows = 1;
    int cols = 1;
    EList<GraphRealisation> _ownedGraphRealisation_1 = prog.getOwnedGraphRealisation();
    for (final GraphRealisation graph : _ownedGraphRealisation_1) {
      {
        String _fileContent_2 = fileContent;
        fileContent = (_fileContent_2 + "\n\n#Import Data Csv \n");
        String FileCSVName = graph.getOwnedImport().getName();
        String FileDelimeter = graph.getOwnedImport().getDelimeter();
        String _fileContent_3 = fileContent;
        fileContent = (_fileContent_3 + (((("Data = pd.read_csv(\"" + FileCSVName) + "\", delimiter =\"") + FileDelimeter) + "\") \n"));
        String _fileContent_4 = fileContent;
        fileContent = (_fileContent_4 + "\n#Pretraitement\n");
        String _fileContent_5 = fileContent;
        fileContent = (_fileContent_5 + "NameColumns = [i for i in Data.columns]\nNameTypeColumns = [i for i in Data.iloc[0]]\nif NameTypeColumns[0] == \'String\' or NameTypeColumns[0] == \'STRING\' or NameTypeColumns[0] == \'double\' or NameTypeColumns[0] == \'DOUBLE\' or NameTypeColumns[0] == \'int\' or NameTypeColumns[0] == \'INT\' or NameTypeColumns[0] == \'str\' or NameTypeColumns[0] == \'STR\' or NameTypeColumns[0] == \'float\' or NameTypeColumns[0] == \'FLOAT\' :\n\tData.drop(0, inplace=True) \n\tfor i in range (len(NameTypeColumns)):\n\t\tif NameTypeColumns[i] == \'String\' or NameTypeColumns[i] == \'STRING\': NameTypeColumns[i] =\'str\'\n\t\telif NameTypeColumns[i] == \'double\' or NameTypeColumns[i] == \'DOUBLE\' : NameTypeColumns[i] =\'float\'\n\t\telif NameTypeColumns[i] == \'int\' or NameTypeColumns[i] == \'INT\' : NameTypeColumns[i] = \'int\'\n\t\telse : NameTypeColumns[i] = \'str\'\n");
        ArrayList<String> NameColumnsUsed = new ArrayList<String>();
        String _nameAbscisse = graph.getOwnedGraphMaker().getNameAbscisse();
        String _plus_2 = ("\'" + _nameAbscisse);
        String NameColumnAbscisse = (_plus_2 + "\'");
        NameColumnsUsed.add(NameColumnAbscisse);
        ArrayList<String> NameColumnsOrdonnee = new ArrayList<String>();
        EList<String> _nameOrdonnees = graph.getOwnedGraphMaker().getNameOrdonnees();
        for (final String ordonnee : _nameOrdonnees) {
          {
            NameColumnsOrdonnee.add((("\'" + ordonnee) + "\'"));
            NameColumnsUsed.add((("\'" + ordonnee) + "\'"));
          }
        }
        EList<FilterData> _ownedFilter = graph.getOwnedFilter();
        for (final FilterData filter : _ownedFilter) {
          if ((filter instanceof FilterNotNull)) {
            String _name_1 = ((FilterNotNull)filter).getName();
            String _plus_3 = ("\'" + _name_1);
            String _plus_4 = (_plus_3 + "\'");
            NameColumnsUsed.add(_plus_4);
          } else {
            if ((filter instanceof FilterCompare)) {
              if ((filter instanceof CompareQuali)) {
                String _name_2 = ((CompareQuali)filter).getName();
                String _plus_5 = ("\'" + _name_2);
                String _plus_6 = (_plus_5 + "\'");
                NameColumnsUsed.add(_plus_6);
              }
              if ((filter instanceof CompareQuanti)) {
                String _name_3 = ((CompareQuanti)filter).getName();
                String _plus_7 = ("\'" + _name_3);
                String _plus_8 = (_plus_7 + "\'");
                NameColumnsUsed.add(_plus_8);
              }
            }
          }
        }
        String _fileContent_6 = fileContent;
        String _get = NameColumnsOrdonnee.get(0);
        String _plus_9 = ((((((((("\tNameColumnsUsed = " + NameColumnsUsed) + "\n\tfor i in NameColumnsUsed :\n\t\tData[i] = Data[i].astype(NameTypeColumns[NameColumns.index(i)]) \nif Data[") + NameColumnAbscisse) + "].dtype == \'object\' :\n\tData[") + NameColumnAbscisse) + "] = [m[:10] + \'...\' if len(m) > 10 else m for m in Data[") + NameColumnAbscisse) + "]]\n#Data = Data.sort_values(") + _get);
        String _plus_10 = (_plus_9 + ")\n");
        fileContent = (_fileContent_6 + _plus_10);
        String _fileContent_7 = fileContent;
        fileContent = (_fileContent_7 + "\n#Filter\n");
        EList<FilterData> _ownedFilter_1 = graph.getOwnedFilter();
        for (final FilterData filter_1 : _ownedFilter_1) {
          String _fileContent_8 = fileContent;
          String _translateFilter = this.translateFilter(filter_1);
          fileContent = (_fileContent_8 + _translateFilter);
        }
        String _fileContent_9 = fileContent;
        fileContent = (_fileContent_9 + "\n#Graphique\n");
        TypeGraph TypeGraphique = graph.getOwnedGraphMaker().getType();
        ArrayList<String> CouleurGraph = new ArrayList<String>();
        String ModifCouleur = "";
        EList<GraphUpdate> _ownedGraphUpdate = graph.getOwnedGraphUpdate();
        for (final GraphUpdate colors : _ownedGraphUpdate) {
          if ((colors instanceof UpdateCouleurGraph)) {
            EList<String> _couleur = ((UpdateCouleurGraph)colors).getCouleur();
            for (final String color : _couleur) {
              CouleurGraph.add((("\'" + color) + "\'"));
            }
          }
        }
        int _size = NameColumnsOrdonnee.size();
        boolean _greaterThan = (_size > 1);
        if (_greaterThan) {
          int numbercolor = 0;
          for (final String Ordonnee : NameColumnsOrdonnee) {
            {
              String ModifName = ((",name=" + Ordonnee) + "");
              EList<GraphUpdate> _ownedGraphUpdate_1 = graph.getOwnedGraphUpdate();
              for (final GraphUpdate update : _ownedGraphUpdate_1) {
                if ((update instanceof UpdateNameLegend)) {
                  String _oldname = ((UpdateNameLegend)update).getOldname();
                  String _plus_11 = ("\'" + _oldname);
                  String _plus_12 = (_plus_11 + "\'");
                  boolean _equals = Objects.equal(Ordonnee, _plus_12);
                  if (_equals) {
                    String _newname = ((UpdateNameLegend)update).getNewname();
                    String _plus_13 = (",name=\'" + _newname);
                    String _plus_14 = (_plus_13 + "\'");
                    ModifName = _plus_14;
                  }
                }
              }
              int _size_1 = CouleurGraph.size();
              int _size_2 = NameColumnsOrdonnee.size();
              boolean _equals_1 = (_size_1 == _size_2);
              if (_equals_1) {
                String _ModifCouleur = ModifCouleur;
                String _get_1 = CouleurGraph.get(numbercolor);
                String _plus_15 = (",marker=dict(color=" + _get_1);
                String _plus_16 = (_plus_15 + ")");
                ModifCouleur = (_ModifCouleur + _plus_16);
              } else {
                ModifCouleur = "";
              }
              String _fileContent_10 = fileContent;
              fileContent = (_fileContent_10 + ((((((((((("trace" + Integer.valueOf(i)) + " = go.") + TypeGraphique) + "(x=Data[") + NameColumnAbscisse) + "], y=Data[") + Ordonnee) + "]") + ModifName) + ModifCouleur) + ")\n"));
              String _fileContent_11 = fileContent;
              fileContent = (_fileContent_11 + (((((("fig.add_trace(trace" + Integer.valueOf(i)) + ", row=") + Integer.valueOf(rows)) + ", col=") + Integer.valueOf(cols)) + ")\n"));
              int _i = i;
              i = (_i + 1);
              ModifCouleur = "";
              int _numbercolor = numbercolor;
              numbercolor = (_numbercolor + 1);
            }
          }
          EList<GraphUpdate> _ownedGraphUpdate_1 = graph.getOwnedGraphUpdate();
          for (final GraphUpdate update : _ownedGraphUpdate_1) {
            String _fileContent_10 = fileContent;
            String _translateUpdateAxeName = this.translateUpdateAxeName(update, rows, cols);
            fileContent = (_fileContent_10 + _translateUpdateAxeName);
          }
        } else {
          int _size_1 = CouleurGraph.size();
          boolean _equals = (_size_1 == 1);
          if (_equals) {
            String _ModifCouleur = ModifCouleur;
            String _get_1 = CouleurGraph.get(0);
            String _plus_11 = (",marker=dict(color=" + _get_1);
            String _plus_12 = (_plus_11 + ")");
            ModifCouleur = (_ModifCouleur + _plus_12);
          } else {
            ModifCouleur = "";
          }
          String _get_2 = NameColumnsOrdonnee.get(0);
          String _plus_13 = (",name=" + _get_2);
          String ModifName = (_plus_13 + "");
          EList<GraphUpdate> _ownedGraphUpdate_2 = graph.getOwnedGraphUpdate();
          for (final GraphUpdate update_1 : _ownedGraphUpdate_2) {
            if ((update_1 instanceof UpdateNameLegend)) {
              String _fileContent_11 = fileContent;
              String _get_3 = NameColumnsOrdonnee.get(0);
              String _plus_14 = ("print(" + _get_3);
              String _plus_15 = (_plus_14 + ")\n");
              fileContent = (_fileContent_11 + _plus_15);
              String _get_4 = NameColumnsOrdonnee.get(0);
              String _oldname = ((UpdateNameLegend)update_1).getOldname();
              String _plus_16 = ("\'" + _oldname);
              String _plus_17 = (_plus_16 + "\'");
              boolean _equals_1 = Objects.equal(_get_4, _plus_17);
              if (_equals_1) {
                String _newname = ((UpdateNameLegend)update_1).getNewname();
                String _plus_18 = (",name=\'" + _newname);
                String _plus_19 = (_plus_18 + "\'");
                ModifName = _plus_19;
              }
            }
          }
          String _fileContent_12 = fileContent;
          fileContent = (_fileContent_12 + (((((((((("trace" + Integer.valueOf(i)) + " = go.") + TypeGraphique) + "(x=Data[") + NameColumnAbscisse) + "], y=Data") + NameColumnsOrdonnee) + ModifName) + ModifCouleur) + ")\n"));
          String _fileContent_13 = fileContent;
          fileContent = (_fileContent_13 + (((((("fig.add_trace(trace" + Integer.valueOf(i)) + ", row=") + Integer.valueOf(rows)) + ", col=") + Integer.valueOf(cols)) + ")\n"));
          int _i = i;
          i = (_i + 1);
          EList<GraphUpdate> _ownedGraphUpdate_3 = graph.getOwnedGraphUpdate();
          for (final GraphUpdate update_2 : _ownedGraphUpdate_3) {
            String _fileContent_14 = fileContent;
            String _translateUpdateAxeName_1 = this.translateUpdateAxeName(update_2, rows, cols);
            fileContent = (_fileContent_14 + _translateUpdateAxeName_1);
          }
        }
        if ((((rows == 1) && (cols == 1)) || (NbGraph == 3))) {
          int _cols = cols;
          cols = (_cols + 1);
        } else {
          if (((rows == 2) && (cols == 2))) {
            int _cols_1 = cols;
            cols = (_cols_1 - 1);
          } else {
            int _rows = rows;
            rows = (_rows + 1);
          }
        }
      }
    }
    String _fileContent_2 = fileContent;
    fileContent = (_fileContent_2 + "\n#Show Graphique\nfig.show()");
    String _name_1 = prog.getName();
    String _plus_2 = (_name_1 + ".py");
    fsa.generateFile(_plus_2, fileContent);
  }
  
  public String translateStart(final int nb) {
    String res = "";
    String parenthese = "";
    if ((nb == 1)) {
      String _parenthese = parenthese;
      parenthese = (_parenthese + "rows=1,cols=1");
    } else {
      if ((nb == 2)) {
        String _parenthese_1 = parenthese;
        parenthese = (_parenthese_1 + "rows=1,cols=2");
      } else {
        if ((nb == 3)) {
          String _parenthese_2 = parenthese;
          parenthese = (_parenthese_2 + "rows=1,cols=3");
        } else {
          if ((nb == 4)) {
            String _parenthese_3 = parenthese;
            parenthese = (_parenthese_3 + "rows=2,cols=2");
          }
        }
      }
    }
    String _res = res;
    res = (_res + (("fig = make_subplots(" + parenthese) + ")\n"));
    return res;
  }
  
  public String translateFilter(final FilterData f) {
    String res = "";
    if ((f instanceof FilterNotNull)) {
      String _res = res;
      String _name = ((FilterNotNull)f).getName();
      String _plus = ("Data = Data[ Data[\'" + _name);
      String _plus_1 = (_plus + "\'].notnull()] \n");
      res = (_res + _plus_1);
    }
    if ((f instanceof FilterCompare)) {
      if ((f instanceof CompareQuali)) {
        String _res_1 = res;
        String _name_1 = ((CompareQuali)f).getName();
        String _plus_2 = ("Data = Data[ Data[\'" + _name_1);
        String _plus_3 = (_plus_2 + "\']");
        FonctionComparaisonQuali _comparaison = ((CompareQuali)f).getComparaison();
        String _plus_4 = (_plus_3 + _comparaison);
        String _plus_5 = (_plus_4 + "\'");
        String _somethingtocompare = ((CompareQuali)f).getSomethingtocompare();
        String _plus_6 = (_plus_5 + _somethingtocompare);
        String _plus_7 = (_plus_6 + "\'] \n");
        res = (_res_1 + _plus_7);
      }
      if ((f instanceof CompareQuanti)) {
        String _res_2 = res;
        String _name_2 = ((CompareQuanti)f).getName();
        String _plus_8 = ("Data = Data[ Data[\'" + _name_2);
        String _plus_9 = (_plus_8 + "\'] ");
        FonctionComparaisonQuanti _comparaison_1 = ((CompareQuanti)f).getComparaison();
        String _plus_10 = (_plus_9 + _comparaison_1);
        String _plus_11 = (_plus_10 + " ");
        String _somethingtocompare_1 = ((CompareQuanti)f).getSomethingtocompare();
        String _plus_12 = (_plus_11 + _somethingtocompare_1);
        String _plus_13 = (_plus_12 + "] \n");
        res = (_res_2 + _plus_13);
      }
    }
    if ((f instanceof FilterGroupBy)) {
      String _res_3 = res;
      String _nameColumnsX = ((FilterGroupBy)f).getNameColumnsX();
      String _plus_14 = ("Data = Data.groupby(\'" + _nameColumnsX);
      String _plus_15 = (_plus_14 + "\')[\'");
      String _nameColumnsY = ((FilterGroupBy)f).getNameColumnsY();
      String _plus_16 = (_plus_15 + _nameColumnsY);
      String _plus_17 = (_plus_16 + "\'].");
      FonctionAgregation _fonctionAgregation = ((FilterGroupBy)f).getFonctionAgregation();
      String _plus_18 = (_plus_17 + _fonctionAgregation);
      String _plus_19 = (_plus_18 + "().reset_index()");
      res = (_res_3 + _plus_19);
    }
    return res;
  }
  
  public String translateUpdateAxeName(final GraphUpdate update, final int rows, final int cols) {
    String res = "";
    if ((update instanceof UpdateNameAxeX)) {
      String TitleAbscisse = ((UpdateNameAxeX)update).getName();
      String _res = res;
      res = (_res + (((((("fig.update_xaxes(title_text=\'" + TitleAbscisse) + "\', row=") + Integer.valueOf(rows)) + ", col=") + Integer.valueOf(cols)) + ")\n"));
    }
    if ((update instanceof UpdateNameAxeY)) {
      String TitleOrdonnee = ((UpdateNameAxeY)update).getName();
      String _res_1 = res;
      res = (_res_1 + (((((("fig.update_yaxes(title_text=\'" + TitleOrdonnee) + "\', row=") + Integer.valueOf(rows)) + ", col=") + Integer.valueOf(cols)) + ")\n"));
    }
    return res;
  }
}
