/**
 * generated by Xtext 2.25.0
 */
package org.xtext.projet1.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import l3IA_ProjetHTML.FilterData;
import l3IA_ProjetHTML.GraphMaker;
import l3IA_ProjetHTML.GraphRealisation;
import l3IA_ProjetHTML.GraphUpdate;
import l3IA_ProjetHTML.ImportData;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.projet1.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MyDslGrammarAccess _myDslGrammarAccess;
  
  protected void _format(final GraphRealisation graphRealisation, @Extension final IFormattableDocument document) {
    document.<ImportData>format(graphRealisation.getOwnedImport());
    document.<GraphMaker>format(graphRealisation.getOwnedGraphMaker());
    EList<FilterData> _ownedFilter = graphRealisation.getOwnedFilter();
    for (final FilterData filterData : _ownedFilter) {
      document.<FilterData>format(filterData);
    }
    EList<GraphUpdate> _ownedGraphUpdate = graphRealisation.getOwnedGraphUpdate();
    for (final GraphUpdate graphUpdate : _ownedGraphUpdate) {
      document.<GraphUpdate>format(graphUpdate);
    }
  }
  
  protected void _format(final GraphMaker graphMaker, @Extension final IFormattableDocument document) {
    document.<String>format(graphMaker.getNameAbscisse());
    EList<String> _nameOrdonnees = graphMaker.getNameOrdonnees();
    for (final String columns : _nameOrdonnees) {
      document.<String>format(columns);
    }
  }
  
  public void format(final Object graphMaker, final IFormattableDocument document) {
    if (graphMaker instanceof XtextResource) {
      _format((XtextResource)graphMaker, document);
      return;
    } else if (graphMaker instanceof GraphMaker) {
      _format((GraphMaker)graphMaker, document);
      return;
    } else if (graphMaker instanceof GraphRealisation) {
      _format((GraphRealisation)graphMaker, document);
      return;
    } else if (graphMaker instanceof EObject) {
      _format((EObject)graphMaker, document);
      return;
    } else if (graphMaker == null) {
      _format((Void)null, document);
      return;
    } else if (graphMaker != null) {
      _format(graphMaker, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(graphMaker, document).toString());
    }
  }
}
