/*
 * generated by Xtext 2.25.0
 */
package org.xtext.projet1.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import java.util.ArrayList
import l3IA_ProjetHTML.FilterData
import l3IA_ProjetHTML.FilterNotNull
import l3IA_ProjetHTML.FilterCompare
import l3IA_ProjetHTML.UpdateNameAxeX
import l3IA_ProjetHTML.UpdateNameAxeY
import l3IA_ProjetHTML.FilterGroupBy
import l3IA_ProjetHTML.UpdateCouleurGraph
import l3IA_ProjetHTML.CompareQuali
import l3IA_ProjetHTML.CompareQuanti
import l3IA_ProjetHTML.Dashboard
import l3IA_ProjetHTML.GraphUpdate
import l3IA_ProjetHTML.UpdateNameLegend


/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
 
class MyDslGenerator extends AbstractGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var Dashboard prog = resource.allContents.head as Dashboard
		var fileContent = ""
			
		fileContent = "#!usr/bin/env python3
#Import Library
import pandas as pd
import plotly.graph_objs as go
from plotly.subplots import make_subplots \n\n
"
		var NbGraph = 0 
		for (a : prog.ownedGraphRealisation){
			NbGraph +=1
		}
		
		fileContent += translateStart(NbGraph)
		fileContent += "fig.update_layout(title='"+prog.name+"', showlegend=True)"
		
		var i = 0
		var rows = 1
		var cols = 1
		for (graph : prog.ownedGraphRealisation){
			
			//IMPORTATION
			fileContent += "\n\n#Import Data Csv \n"
			var FileCSVName = graph.ownedImport.name
			var FileDelimeter = graph.ownedImport.delimeter
			fileContent += 'Data = pd.read_csv("'+FileCSVName+'", delimiter ="'+FileDelimeter+'") \n'
			
			//PRETRAITEMENT 
			fileContent += "\n#Pretraitement\n"
			fileContent += "NameColumns = [i for i in Data.columns]
NameTypeColumns = [i for i in Data.iloc[0]]
if NameTypeColumns[0] == 'String' or NameTypeColumns[0] == 'STRING' or NameTypeColumns[0] == 'double' or NameTypeColumns[0] == 'DOUBLE' or NameTypeColumns[0] == 'int' or NameTypeColumns[0] == 'INT' or NameTypeColumns[0] == 'str' or NameTypeColumns[0] == 'STR' or NameTypeColumns[0] == 'float' or NameTypeColumns[0] == 'FLOAT' :
\tData.drop(0, inplace=True) 
\tfor i in range (len(NameTypeColumns)):
\t\tif NameTypeColumns[i] == 'String' or NameTypeColumns[i] == 'STRING': NameTypeColumns[i] ='str'
\t\telif NameTypeColumns[i] == 'double' or NameTypeColumns[i] == 'DOUBLE' : NameTypeColumns[i] ='float'
\t\telif NameTypeColumns[i] == 'int' or NameTypeColumns[i] == 'INT' : NameTypeColumns[i] = 'int'
\t\telse : NameTypeColumns[i] = 'str'
"
			var NameColumnsUsed = new ArrayList<String>
		
			var NameColumnAbscisse = "'"+graph.ownedGraphMaker.nameAbscisse+"'"
			NameColumnsUsed.add(NameColumnAbscisse)
		
			var NameColumnsOrdonnee = new ArrayList<String>
			for (ordonnee : graph.ownedGraphMaker.nameOrdonnees){
				NameColumnsOrdonnee.add("'"+ordonnee+"'")
				NameColumnsUsed.add("'"+ordonnee+"'")
			}
		
			for (filter : graph.ownedFilter){
				if (filter instanceof FilterNotNull){
					NameColumnsUsed.add("'"+filter.name+"'")
				}else 
				if (filter instanceof FilterCompare){
					if (filter instanceof CompareQuali) {
						NameColumnsUsed.add("'"+filter.name+"'")
					}
					if (filter instanceof CompareQuanti) {
						NameColumnsUsed.add("'"+filter.name+"'")
					}
				}
			}
		
			fileContent += "	NameColumnsUsed = "+NameColumnsUsed+"
\tfor i in NameColumnsUsed :
\t\tData[i] = Data[i].astype(NameTypeColumns[NameColumns.index(i)]) 
if Data["+NameColumnAbscisse+"].dtype == 'object' :
\tData["+NameColumnAbscisse+"] = [m[:10] + '...' if len(m) > 10 else m for m in Data["+NameColumnAbscisse+"]]
#Data = Data.sort_values("+NameColumnsOrdonnee.get(0)+")\n"
	
			
			//if (NameColumnAbscisse == "'Start'" || NameColumnAbscisse == "'Date'" ){
				//fileContent += "Data = Data.sort_values("+NameColumnAbscisse+")\n"
			//}
			
			
			// FILTRE(S)
			fileContent += "\n#Filter\n"
			for (filter : graph.ownedFilter){
				fileContent += translateFilter(filter)
			}
			
			// PREGRAPHIQUE ET UPDATE
			fileContent += "\n#Graphique\n" 
			var TypeGraphique = graph.ownedGraphMaker.type
			
			var CouleurGraph = new ArrayList<String> 
			var ModifCouleur = ""
			for (colors : graph.ownedGraphUpdate){
				if (colors instanceof UpdateCouleurGraph){
					for (color : colors.couleur ){
						CouleurGraph.add("'"+color+"'")
			}}}
			
			if (NameColumnsOrdonnee.size()>1){
				var numbercolor = 0
				for (Ordonnee : NameColumnsOrdonnee){
					var ModifName = ",name="+Ordonnee+""
					for(update : graph.ownedGraphUpdate){
						if (update instanceof UpdateNameLegend){
							//fileContent+="print("+update.oldname+")\n"
							//fileContent+="print("+update.newname+")\n"
							if (Ordonnee == "'"+update.oldname+"'"){
								ModifName = ",name='"+update.newname+"'"
					}}}
					
					if (CouleurGraph.size()== NameColumnsOrdonnee.size()){
						ModifCouleur += ",marker=dict(color="+CouleurGraph.get(numbercolor)+")"
					} else {ModifCouleur = ""}
					
					fileContent += "trace"+i+" = go."+TypeGraphique+"(x=Data["+NameColumnAbscisse+"], y=Data["+Ordonnee+"]"+ModifName+ModifCouleur+")\n"
					fileContent += "fig.add_trace(trace"+i+", row="+rows+", col="+cols+")\n"
					i+=1
					ModifCouleur = ""
					numbercolor+=1
				}
				
				for (update : graph.ownedGraphUpdate){
					fileContent += translateUpdateAxeName(update,rows,cols)
				}
				
			}
			else {
				if (CouleurGraph.size()==1){
				ModifCouleur += ",marker=dict(color="+CouleurGraph.get(0)+")" 
				} else {ModifCouleur = ""}
				var ModifName = ",name="+NameColumnsOrdonnee.get(0)+""
				for(update : graph.ownedGraphUpdate){
					if (update instanceof UpdateNameLegend){
						fileContent+="print("+NameColumnsOrdonnee.get(0)+")\n"
						if (NameColumnsOrdonnee.get(0) == "'"+update.oldname+"'"){
							//fileContent+="print("+update.newname+")\n"
							//fileContent+="print("+update.oldname+")\n"
							ModifName = ",name='"+update.newname+"'"
				}}}
				
				fileContent += "trace"+i+" = go."+TypeGraphique+"(x=Data["+NameColumnAbscisse+"], y=Data"+NameColumnsOrdonnee+ModifName+ModifCouleur+")\n"
				fileContent += "fig.add_trace(trace"+i+", row="+rows+", col="+cols+")\n"
				i += 1
				for (update : graph.ownedGraphUpdate){
					fileContent += translateUpdateAxeName(update,rows,cols)
				}
			}
			
			//GRAPHIQUE
			if ((rows == 1 && cols == 1) || (NbGraph == 3)){
				cols+=1
			}
			else if (rows == 2 && cols == 2){
				cols-=1
			}
			else {
				rows += 1
			}
		}
		
		fileContent += "\n#Show Graphique
fig.show()"

		fsa.generateFile(prog.name+ ".py", fileContent)
		
	}
	
		def translateStart (int nb){
			var res = ""
			var parenthese = ""
			if (nb == 1 ){
				parenthese += "rows=1,cols=1"
			}
			else if (nb == 2){
				parenthese += "rows=1,cols=2"
			}
			else if (nb == 3){
				parenthese += "rows=1,cols=3"
			}
			else if (nb == 4){
				parenthese += "rows=2,cols=2"
			}
			res += "fig = make_subplots("+parenthese+")\n"
			return res
		}
		
		def translateFilter(FilterData f) {
			var res = ''
			if (f instanceof FilterNotNull){
				res+= "Data = Data[ Data['"+f.name+"'].notnull()] \n"
			}
			if (f instanceof FilterCompare){
				if (f instanceof CompareQuali) {
            		res+= "Data = Data[ Data['"+f.name+"']"+f.comparaison+"'"+f.somethingtocompare+"'] \n"
        		}
        		if (f instanceof CompareQuanti){
        			res+= "Data = Data[ Data['"+f.name+"'] "+f.comparaison+" "+f.somethingtocompare+"] \n"
        		}
			}
			if (f instanceof FilterGroupBy){
				res+= "Data = Data.groupby('"+f.nameColumnsX+"')['"+f.nameColumnsY+"']."+f.fonctionAgregation+"().reset_index()"
			}
			return res
		}
		 
		 
		 def translateUpdateAxeName(GraphUpdate update ,int rows, int cols){
		 	var res =''
		 	if (update instanceof UpdateNameAxeX){
		 		var TitleAbscisse = update.name
				res += "fig.update_xaxes(title_text='"+TitleAbscisse+"', row="+rows+", col="+cols+")\n"
			}
			if (update instanceof UpdateNameAxeY){
				var TitleOrdonnee = update.name
				res += "fig.update_yaxes(title_text='"+TitleOrdonnee+"', row="+rows+", col="+cols+")\n"
			}
			return res
		 }
		 
}

//Titre de chaque graph possible mais du coup pas de titre au Dashboard â€¦ 
