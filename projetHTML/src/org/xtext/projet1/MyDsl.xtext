// automatically generated by Xtext
grammar org.xtext.projet1.MyDsl with org.eclipse.xtext.common.Terminals

import "http://www.example.org/l3IA_ProjetHTML" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Dashboard returns Dashboard :
	"NameDashboard" ":" name = EString
	(ownedGraphRealisation += GraphRealisation)*
;


GraphRealisation returns GraphRealisation:
	(ownedImport = ImportFile)
	(ownedGraphMaker = GraphMaker)
	(ownedFilter += FilterData)*
	(ownedGraphUpdate += GraphUpdate)*
	;

ImportFile returns ImportData:
	"CSV" ":" (name = EString) 
	"Delimiter" ":" (delimeter = EString)
	;


GraphMaker returns GraphMaker :
	'TypeOfGraph'':' type = TypeGraph
	'Abscissa' ':' nameAbscisse = EString
	'Ordinate(s)' ':' (nameOrdonnees += EString) +
;

enum TypeGraph returns TypeGraph:
	Bar = 'Bar' | Scatter = "Line" | Box ="Nuage de point" 
;



GraphUpdate returns GraphUpdate :
	UpdateNameAxeX | UpdateNameAxeY | UpdateNameLegend | UpdateCouleurGraph
;

UpdateCouleurGraph returns UpdateCouleurGraph :
	"Color(s)" "graph" ":" (couleur += EString)+
;


UpdateNameLegend returns UpdateNameLegend:
	"Transformation" oldname = EString "in" newname = EString 
;


UpdateNameAxeX returns UpdateNameAxeX :
	"TitleAxeX" ':' name = EString
;

UpdateNameAxeY returns UpdateNameAxeY :
	"TitleAxeY"  ':' name = EString
;


FilterData returns FilterData: 
	FilterNotNull | FilterCompare | FilterGroupBy
;

FilterGroupBy returns FilterGroupBy :
	"Group" nameColumnsY= EString "by" nameColumnsX= EString "in" fonctionAgregation = FonctionAgregation
;

enum FonctionAgregation returns FonctionAgregation:
	median = 'median' | sum = 'sum' | mean = "mean" | min = "min" | max = "max" | count = "count" | std ="std" | var= "var"
;

FilterNotNull returns FilterNotNull:
	"NotNull" ":" name = EString
	;

FilterCompare returns FilterCompare:
	CompareQuali | CompareQuanti
	;

CompareQuali returns CompareQuali:
	"ComparisonColumnsWithString"
	(name=EString) (comparaison=FonctionComparaisonQuali) (somethingtocompare=EString)
;

CompareQuanti returns CompareQuanti:
	"ComparisonColumnsWithNumber"
	(name=EString) (comparaison=FonctionComparaisonQuanti) (somethingtocompare=EString)
;

enum FonctionComparaisonQuanti returns FonctionComparaisonQuanti:
	inf = '<' | sup = '>' | egal = '==' | different = '!=' | supegal = '>=' | infegal = '<='
;

enum FonctionComparaisonQuali returns FonctionComparaisonQuali:
	egal = '==' | different = '!='
;

EString returns ecore::EString:
	STRING ;
