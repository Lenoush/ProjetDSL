/*
 * generated by Xtext 2.25.0
 */
package org.xtext.projet1.serializer;

import com.google.inject.Inject;
import java.util.Set;
import l3IA_ProjetHTML.CompareQuali;
import l3IA_ProjetHTML.CompareQuanti;
import l3IA_ProjetHTML.Dashboard;
import l3IA_ProjetHTML.FilterGroupBy;
import l3IA_ProjetHTML.FilterNotNull;
import l3IA_ProjetHTML.GraphMaker;
import l3IA_ProjetHTML.GraphRealisation;
import l3IA_ProjetHTML.ImportData;
import l3IA_ProjetHTML.L3IA_ProjetHTMLPackage;
import l3IA_ProjetHTML.UpdateCouleurGraph;
import l3IA_ProjetHTML.UpdateNameAxeX;
import l3IA_ProjetHTML.UpdateNameAxeY;
import l3IA_ProjetHTML.UpdateNameLegend;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.projet1.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == L3IA_ProjetHTMLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case L3IA_ProjetHTMLPackage.COMPARE_QUALI:
				sequence_CompareQuali(context, (CompareQuali) semanticObject); 
				return; 
			case L3IA_ProjetHTMLPackage.COMPARE_QUANTI:
				sequence_CompareQuanti(context, (CompareQuanti) semanticObject); 
				return; 
			case L3IA_ProjetHTMLPackage.DASHBOARD:
				sequence_Dashboard(context, (Dashboard) semanticObject); 
				return; 
			case L3IA_ProjetHTMLPackage.FILTER_GROUP_BY:
				sequence_FilterGroupBy(context, (FilterGroupBy) semanticObject); 
				return; 
			case L3IA_ProjetHTMLPackage.FILTER_NOT_NULL:
				sequence_FilterNotNull(context, (FilterNotNull) semanticObject); 
				return; 
			case L3IA_ProjetHTMLPackage.GRAPH_MAKER:
				sequence_GraphMaker(context, (GraphMaker) semanticObject); 
				return; 
			case L3IA_ProjetHTMLPackage.GRAPH_REALISATION:
				sequence_GraphRealisation(context, (GraphRealisation) semanticObject); 
				return; 
			case L3IA_ProjetHTMLPackage.IMPORT_DATA:
				sequence_ImportFile(context, (ImportData) semanticObject); 
				return; 
			case L3IA_ProjetHTMLPackage.UPDATE_COULEUR_GRAPH:
				sequence_UpdateCouleurGraph(context, (UpdateCouleurGraph) semanticObject); 
				return; 
			case L3IA_ProjetHTMLPackage.UPDATE_NAME_AXE_X:
				sequence_UpdateNameAxeX(context, (UpdateNameAxeX) semanticObject); 
				return; 
			case L3IA_ProjetHTMLPackage.UPDATE_NAME_AXE_Y:
				sequence_UpdateNameAxeY(context, (UpdateNameAxeY) semanticObject); 
				return; 
			case L3IA_ProjetHTMLPackage.UPDATE_NAME_LEGEND:
				sequence_UpdateNameLegend(context, (UpdateNameLegend) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     FilterData returns CompareQuali
	 *     FilterCompare returns CompareQuali
	 *     CompareQuali returns CompareQuali
	 *
	 * Constraint:
	 *     (name=EString comparaison=FonctionComparaisonQuali somethingtocompare=EString)
	 */
	protected void sequence_CompareQuali(ISerializationContext context, CompareQuali semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, L3IA_ProjetHTMLPackage.Literals.COMPARE_QUALI__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, L3IA_ProjetHTMLPackage.Literals.COMPARE_QUALI__NAME));
			if (transientValues.isValueTransient(semanticObject, L3IA_ProjetHTMLPackage.Literals.COMPARE_QUALI__COMPARAISON) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, L3IA_ProjetHTMLPackage.Literals.COMPARE_QUALI__COMPARAISON));
			if (transientValues.isValueTransient(semanticObject, L3IA_ProjetHTMLPackage.Literals.COMPARE_QUALI__SOMETHINGTOCOMPARE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, L3IA_ProjetHTMLPackage.Literals.COMPARE_QUALI__SOMETHINGTOCOMPARE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCompareQualiAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCompareQualiAccess().getComparaisonFonctionComparaisonQualiEnumRuleCall_2_0(), semanticObject.getComparaison());
		feeder.accept(grammarAccess.getCompareQualiAccess().getSomethingtocompareEStringParserRuleCall_3_0(), semanticObject.getSomethingtocompare());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FilterData returns CompareQuanti
	 *     FilterCompare returns CompareQuanti
	 *     CompareQuanti returns CompareQuanti
	 *
	 * Constraint:
	 *     (name=EString comparaison=FonctionComparaisonQuanti somethingtocompare=EString)
	 */
	protected void sequence_CompareQuanti(ISerializationContext context, CompareQuanti semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, L3IA_ProjetHTMLPackage.Literals.COMPARE_QUANTI__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, L3IA_ProjetHTMLPackage.Literals.COMPARE_QUANTI__NAME));
			if (transientValues.isValueTransient(semanticObject, L3IA_ProjetHTMLPackage.Literals.COMPARE_QUANTI__COMPARAISON) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, L3IA_ProjetHTMLPackage.Literals.COMPARE_QUANTI__COMPARAISON));
			if (transientValues.isValueTransient(semanticObject, L3IA_ProjetHTMLPackage.Literals.COMPARE_QUANTI__SOMETHINGTOCOMPARE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, L3IA_ProjetHTMLPackage.Literals.COMPARE_QUANTI__SOMETHINGTOCOMPARE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCompareQuantiAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCompareQuantiAccess().getComparaisonFonctionComparaisonQuantiEnumRuleCall_2_0(), semanticObject.getComparaison());
		feeder.accept(grammarAccess.getCompareQuantiAccess().getSomethingtocompareEStringParserRuleCall_3_0(), semanticObject.getSomethingtocompare());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Dashboard returns Dashboard
	 *
	 * Constraint:
	 *     (name=EString ownedGraphRealisation+=GraphRealisation*)
	 */
	protected void sequence_Dashboard(ISerializationContext context, Dashboard semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FilterData returns FilterGroupBy
	 *     FilterGroupBy returns FilterGroupBy
	 *
	 * Constraint:
	 *     (nameColumnsY=EString nameColumnsX=EString fonctionAgregation=FonctionAgregation)
	 */
	protected void sequence_FilterGroupBy(ISerializationContext context, FilterGroupBy semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, L3IA_ProjetHTMLPackage.Literals.FILTER_GROUP_BY__NAME_COLUMNS_Y) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, L3IA_ProjetHTMLPackage.Literals.FILTER_GROUP_BY__NAME_COLUMNS_Y));
			if (transientValues.isValueTransient(semanticObject, L3IA_ProjetHTMLPackage.Literals.FILTER_GROUP_BY__NAME_COLUMNS_X) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, L3IA_ProjetHTMLPackage.Literals.FILTER_GROUP_BY__NAME_COLUMNS_X));
			if (transientValues.isValueTransient(semanticObject, L3IA_ProjetHTMLPackage.Literals.FILTER_GROUP_BY__FONCTION_AGREGATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, L3IA_ProjetHTMLPackage.Literals.FILTER_GROUP_BY__FONCTION_AGREGATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFilterGroupByAccess().getNameColumnsYEStringParserRuleCall_1_0(), semanticObject.getNameColumnsY());
		feeder.accept(grammarAccess.getFilterGroupByAccess().getNameColumnsXEStringParserRuleCall_3_0(), semanticObject.getNameColumnsX());
		feeder.accept(grammarAccess.getFilterGroupByAccess().getFonctionAgregationFonctionAgregationEnumRuleCall_5_0(), semanticObject.getFonctionAgregation());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FilterData returns FilterNotNull
	 *     FilterNotNull returns FilterNotNull
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_FilterNotNull(ISerializationContext context, FilterNotNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, L3IA_ProjetHTMLPackage.Literals.FILTER_NOT_NULL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, L3IA_ProjetHTMLPackage.Literals.FILTER_NOT_NULL__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFilterNotNullAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphMaker returns GraphMaker
	 *
	 * Constraint:
	 *     (type=TypeGraph nameAbscisse=EString nameOrdonnees+=EString+)
	 */
	protected void sequence_GraphMaker(ISerializationContext context, GraphMaker semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GraphRealisation returns GraphRealisation
	 *
	 * Constraint:
	 *     (ownedImport=ImportFile ownedGraphMaker=GraphMaker ownedFilter+=FilterData* ownedGraphUpdate+=GraphUpdate*)
	 */
	protected void sequence_GraphRealisation(ISerializationContext context, GraphRealisation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ImportFile returns ImportData
	 *
	 * Constraint:
	 *     (name=EString delimeter=EString)
	 */
	protected void sequence_ImportFile(ISerializationContext context, ImportData semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, L3IA_ProjetHTMLPackage.Literals.IMPORT_DATA__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, L3IA_ProjetHTMLPackage.Literals.IMPORT_DATA__NAME));
			if (transientValues.isValueTransient(semanticObject, L3IA_ProjetHTMLPackage.Literals.IMPORT_DATA__DELIMETER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, L3IA_ProjetHTMLPackage.Literals.IMPORT_DATA__DELIMETER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImportFileAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getImportFileAccess().getDelimeterEStringParserRuleCall_5_0(), semanticObject.getDelimeter());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphUpdate returns UpdateCouleurGraph
	 *     UpdateCouleurGraph returns UpdateCouleurGraph
	 *
	 * Constraint:
	 *     couleur+=EString+
	 */
	protected void sequence_UpdateCouleurGraph(ISerializationContext context, UpdateCouleurGraph semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GraphUpdate returns UpdateNameAxeX
	 *     UpdateNameAxeX returns UpdateNameAxeX
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_UpdateNameAxeX(ISerializationContext context, UpdateNameAxeX semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, L3IA_ProjetHTMLPackage.Literals.UPDATE_NAME_AXE_X__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, L3IA_ProjetHTMLPackage.Literals.UPDATE_NAME_AXE_X__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUpdateNameAxeXAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphUpdate returns UpdateNameAxeY
	 *     UpdateNameAxeY returns UpdateNameAxeY
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_UpdateNameAxeY(ISerializationContext context, UpdateNameAxeY semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, L3IA_ProjetHTMLPackage.Literals.UPDATE_NAME_AXE_Y__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, L3IA_ProjetHTMLPackage.Literals.UPDATE_NAME_AXE_Y__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUpdateNameAxeYAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphUpdate returns UpdateNameLegend
	 *     UpdateNameLegend returns UpdateNameLegend
	 *
	 * Constraint:
	 *     (oldname=EString newname=EString)
	 */
	protected void sequence_UpdateNameLegend(ISerializationContext context, UpdateNameLegend semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, L3IA_ProjetHTMLPackage.Literals.UPDATE_NAME_LEGEND__OLDNAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, L3IA_ProjetHTMLPackage.Literals.UPDATE_NAME_LEGEND__OLDNAME));
			if (transientValues.isValueTransient(semanticObject, L3IA_ProjetHTMLPackage.Literals.UPDATE_NAME_LEGEND__NEWNAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, L3IA_ProjetHTMLPackage.Literals.UPDATE_NAME_LEGEND__NEWNAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUpdateNameLegendAccess().getOldnameEStringParserRuleCall_1_0(), semanticObject.getOldname());
		feeder.accept(grammarAccess.getUpdateNameLegendAccess().getNewnameEStringParserRuleCall_3_0(), semanticObject.getNewname());
		feeder.finish();
	}
	
	
}
