/*
 * generated by Xtext 2.25.0
 */
package org.xtext.projet1.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class DashboardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.projet1.MyDsl.Dashboard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNameDashboardKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cOwnedGraphRealisationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedGraphRealisationGraphRealisationParserRuleCall_3_0 = (RuleCall)cOwnedGraphRealisationAssignment_3.eContents().get(0);
		
		//Dashboard returns Dashboard :
		//    "NameDashboard" ":" name = EString
		//    (ownedGraphRealisation += GraphRealisation)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"NameDashboard" ":" name = EString
		//(ownedGraphRealisation += GraphRealisation)*
		public Group getGroup() { return cGroup; }
		
		//"NameDashboard"
		public Keyword getNameDashboardKeyword_0() { return cNameDashboardKeyword_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//name = EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//(ownedGraphRealisation += GraphRealisation)*
		public Assignment getOwnedGraphRealisationAssignment_3() { return cOwnedGraphRealisationAssignment_3; }
		
		//GraphRealisation
		public RuleCall getOwnedGraphRealisationGraphRealisationParserRuleCall_3_0() { return cOwnedGraphRealisationGraphRealisationParserRuleCall_3_0; }
	}
	public class GraphRealisationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.projet1.MyDsl.GraphRealisation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedImportAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedImportImportFileParserRuleCall_0_0 = (RuleCall)cOwnedImportAssignment_0.eContents().get(0);
		private final Assignment cOwnedGraphMakerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedGraphMakerGraphMakerParserRuleCall_1_0 = (RuleCall)cOwnedGraphMakerAssignment_1.eContents().get(0);
		private final Assignment cOwnedFilterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedFilterFilterDataParserRuleCall_2_0 = (RuleCall)cOwnedFilterAssignment_2.eContents().get(0);
		private final Assignment cOwnedGraphUpdateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedGraphUpdateGraphUpdateParserRuleCall_3_0 = (RuleCall)cOwnedGraphUpdateAssignment_3.eContents().get(0);
		
		//GraphRealisation returns GraphRealisation:
		//    (ownedImport = ImportFile)
		//    (ownedGraphMaker = GraphMaker)
		//    (ownedFilter += FilterData)*
		//    (ownedGraphUpdate += GraphUpdate)*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(ownedImport = ImportFile)
		//(ownedGraphMaker = GraphMaker)
		//(ownedFilter += FilterData)*
		//(ownedGraphUpdate += GraphUpdate)*
		public Group getGroup() { return cGroup; }
		
		//(ownedImport = ImportFile)
		public Assignment getOwnedImportAssignment_0() { return cOwnedImportAssignment_0; }
		
		//ImportFile
		public RuleCall getOwnedImportImportFileParserRuleCall_0_0() { return cOwnedImportImportFileParserRuleCall_0_0; }
		
		//(ownedGraphMaker = GraphMaker)
		public Assignment getOwnedGraphMakerAssignment_1() { return cOwnedGraphMakerAssignment_1; }
		
		//GraphMaker
		public RuleCall getOwnedGraphMakerGraphMakerParserRuleCall_1_0() { return cOwnedGraphMakerGraphMakerParserRuleCall_1_0; }
		
		//(ownedFilter += FilterData)*
		public Assignment getOwnedFilterAssignment_2() { return cOwnedFilterAssignment_2; }
		
		//FilterData
		public RuleCall getOwnedFilterFilterDataParserRuleCall_2_0() { return cOwnedFilterFilterDataParserRuleCall_2_0; }
		
		//(ownedGraphUpdate += GraphUpdate)*
		public Assignment getOwnedGraphUpdateAssignment_3() { return cOwnedGraphUpdateAssignment_3; }
		
		//GraphUpdate
		public RuleCall getOwnedGraphUpdateGraphUpdateParserRuleCall_3_0() { return cOwnedGraphUpdateGraphUpdateParserRuleCall_3_0; }
	}
	public class ImportFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.projet1.MyDsl.ImportFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCSVKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cDelimiterKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDelimeterAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDelimeterEStringParserRuleCall_5_0 = (RuleCall)cDelimeterAssignment_5.eContents().get(0);
		
		//ImportFile returns ImportData:
		//    "CSV" ":" (name = EString)
		//    "Delimiter" ":" (delimeter = EString)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//"CSV" ":" (name = EString)
		//"Delimiter" ":" (delimeter = EString)
		public Group getGroup() { return cGroup; }
		
		//"CSV"
		public Keyword getCSVKeyword_0() { return cCSVKeyword_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//(name = EString)
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//"Delimiter"
		public Keyword getDelimiterKeyword_3() { return cDelimiterKeyword_3; }
		
		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//(delimeter = EString)
		public Assignment getDelimeterAssignment_5() { return cDelimeterAssignment_5; }
		
		//EString
		public RuleCall getDelimeterEStringParserRuleCall_5_0() { return cDelimeterEStringParserRuleCall_5_0; }
	}
	public class GraphMakerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.projet1.MyDsl.GraphMaker");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeOfGraphKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeGraphEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cAbscissaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAbscisseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameAbscisseEStringParserRuleCall_5_0 = (RuleCall)cNameAbscisseAssignment_5.eContents().get(0);
		private final Keyword cOrdinateSKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cNameOrdonneesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cNameOrdonneesEStringParserRuleCall_8_0 = (RuleCall)cNameOrdonneesAssignment_8.eContents().get(0);
		
		//GraphMaker returns GraphMaker :
		//    'TypeOfGraph'':' type = TypeGraph
		//    'Abscissa' ':' nameAbscisse = EString
		//    'Ordinate(s)' ':' (nameOrdonnees += EString) +
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'TypeOfGraph'':' type = TypeGraph
		//'Abscissa' ':' nameAbscisse = EString
		//'Ordinate(s)' ':' (nameOrdonnees += EString) +
		public Group getGroup() { return cGroup; }
		
		//'TypeOfGraph'
		public Keyword getTypeOfGraphKeyword_0() { return cTypeOfGraphKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type = TypeGraph
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//TypeGraph
		public RuleCall getTypeTypeGraphEnumRuleCall_2_0() { return cTypeTypeGraphEnumRuleCall_2_0; }
		
		//'Abscissa'
		public Keyword getAbscissaKeyword_3() { return cAbscissaKeyword_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//nameAbscisse = EString
		public Assignment getNameAbscisseAssignment_5() { return cNameAbscisseAssignment_5; }
		
		//EString
		public RuleCall getNameAbscisseEStringParserRuleCall_5_0() { return cNameAbscisseEStringParserRuleCall_5_0; }
		
		//'Ordinate(s)'
		public Keyword getOrdinateSKeyword_6() { return cOrdinateSKeyword_6; }
		
		//':'
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }
		
		//(nameOrdonnees += EString) +
		public Assignment getNameOrdonneesAssignment_8() { return cNameOrdonneesAssignment_8; }
		
		//EString
		public RuleCall getNameOrdonneesEStringParserRuleCall_8_0() { return cNameOrdonneesEStringParserRuleCall_8_0; }
	}
	public class GraphUpdateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.projet1.MyDsl.GraphUpdate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUpdateNameAxeXParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUpdateNameAxeYParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUpdateNameLegendParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUpdateCouleurGraphParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//GraphUpdate returns GraphUpdate :
		//    UpdateNameAxeX | UpdateNameAxeY | UpdateNameLegend | UpdateCouleurGraph
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//UpdateNameAxeX | UpdateNameAxeY | UpdateNameLegend | UpdateCouleurGraph
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UpdateNameAxeX
		public RuleCall getUpdateNameAxeXParserRuleCall_0() { return cUpdateNameAxeXParserRuleCall_0; }
		
		//UpdateNameAxeY
		public RuleCall getUpdateNameAxeYParserRuleCall_1() { return cUpdateNameAxeYParserRuleCall_1; }
		
		//UpdateNameLegend
		public RuleCall getUpdateNameLegendParserRuleCall_2() { return cUpdateNameLegendParserRuleCall_2; }
		
		//UpdateCouleurGraph
		public RuleCall getUpdateCouleurGraphParserRuleCall_3() { return cUpdateCouleurGraphParserRuleCall_3; }
	}
	public class UpdateCouleurGraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.projet1.MyDsl.UpdateCouleurGraph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColorSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cGraphKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCouleurAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCouleurEStringParserRuleCall_3_0 = (RuleCall)cCouleurAssignment_3.eContents().get(0);
		
		//UpdateCouleurGraph returns UpdateCouleurGraph :
		//    "Color(s)" "graph" ":" (couleur += EString)+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"Color(s)" "graph" ":" (couleur += EString)+
		public Group getGroup() { return cGroup; }
		
		//"Color(s)"
		public Keyword getColorSKeyword_0() { return cColorSKeyword_0; }
		
		//"graph"
		public Keyword getGraphKeyword_1() { return cGraphKeyword_1; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//(couleur += EString)+
		public Assignment getCouleurAssignment_3() { return cCouleurAssignment_3; }
		
		//EString
		public RuleCall getCouleurEStringParserRuleCall_3_0() { return cCouleurEStringParserRuleCall_3_0; }
	}
	public class UpdateNameLegendElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.projet1.MyDsl.UpdateNameLegend");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransformationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOldnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOldnameEStringParserRuleCall_1_0 = (RuleCall)cOldnameAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNewnameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNewnameEStringParserRuleCall_3_0 = (RuleCall)cNewnameAssignment_3.eContents().get(0);
		
		//UpdateNameLegend returns UpdateNameLegend:
		//    "Transformation" oldname = EString "in" newname = EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"Transformation" oldname = EString "in" newname = EString
		public Group getGroup() { return cGroup; }
		
		//"Transformation"
		public Keyword getTransformationKeyword_0() { return cTransformationKeyword_0; }
		
		//oldname = EString
		public Assignment getOldnameAssignment_1() { return cOldnameAssignment_1; }
		
		//EString
		public RuleCall getOldnameEStringParserRuleCall_1_0() { return cOldnameEStringParserRuleCall_1_0; }
		
		//"in"
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//newname = EString
		public Assignment getNewnameAssignment_3() { return cNewnameAssignment_3; }
		
		//EString
		public RuleCall getNewnameEStringParserRuleCall_3_0() { return cNewnameEStringParserRuleCall_3_0; }
	}
	public class UpdateNameAxeXElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.projet1.MyDsl.UpdateNameAxeX");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTitleAxeXKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//UpdateNameAxeX returns UpdateNameAxeX :
		//    "TitleAxeX" ':' name = EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"TitleAxeX" ':' name = EString
		public Group getGroup() { return cGroup; }
		
		//"TitleAxeX"
		public Keyword getTitleAxeXKeyword_0() { return cTitleAxeXKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//name = EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class UpdateNameAxeYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.projet1.MyDsl.UpdateNameAxeY");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTitleAxeYKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//UpdateNameAxeY returns UpdateNameAxeY :
		//    "TitleAxeY"  ':' name = EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"TitleAxeY"  ':' name = EString
		public Group getGroup() { return cGroup; }
		
		//"TitleAxeY"
		public Keyword getTitleAxeYKeyword_0() { return cTitleAxeYKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//name = EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class FilterDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.projet1.MyDsl.FilterData");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFilterNotNullParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFilterCompareParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFilterGroupByParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//FilterData returns FilterData:
		//    FilterNotNull | FilterCompare | FilterGroupBy
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FilterNotNull | FilterCompare | FilterGroupBy
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FilterNotNull
		public RuleCall getFilterNotNullParserRuleCall_0() { return cFilterNotNullParserRuleCall_0; }
		
		//FilterCompare
		public RuleCall getFilterCompareParserRuleCall_1() { return cFilterCompareParserRuleCall_1; }
		
		//FilterGroupBy
		public RuleCall getFilterGroupByParserRuleCall_2() { return cFilterGroupByParserRuleCall_2; }
	}
	public class FilterGroupByElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.projet1.MyDsl.FilterGroupBy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGroupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameColumnsYAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameColumnsYEStringParserRuleCall_1_0 = (RuleCall)cNameColumnsYAssignment_1.eContents().get(0);
		private final Keyword cByKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameColumnsXAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameColumnsXEStringParserRuleCall_3_0 = (RuleCall)cNameColumnsXAssignment_3.eContents().get(0);
		private final Keyword cInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFonctionAgregationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFonctionAgregationFonctionAgregationEnumRuleCall_5_0 = (RuleCall)cFonctionAgregationAssignment_5.eContents().get(0);
		
		//FilterGroupBy returns FilterGroupBy :
		//    "Group" nameColumnsY= EString "by" nameColumnsX= EString "in" fonctionAgregation = FonctionAgregation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"Group" nameColumnsY= EString "by" nameColumnsX= EString "in" fonctionAgregation = FonctionAgregation
		public Group getGroup() { return cGroup; }
		
		//"Group"
		public Keyword getGroupKeyword_0() { return cGroupKeyword_0; }
		
		//nameColumnsY= EString
		public Assignment getNameColumnsYAssignment_1() { return cNameColumnsYAssignment_1; }
		
		//EString
		public RuleCall getNameColumnsYEStringParserRuleCall_1_0() { return cNameColumnsYEStringParserRuleCall_1_0; }
		
		//"by"
		public Keyword getByKeyword_2() { return cByKeyword_2; }
		
		//nameColumnsX= EString
		public Assignment getNameColumnsXAssignment_3() { return cNameColumnsXAssignment_3; }
		
		//EString
		public RuleCall getNameColumnsXEStringParserRuleCall_3_0() { return cNameColumnsXEStringParserRuleCall_3_0; }
		
		//"in"
		public Keyword getInKeyword_4() { return cInKeyword_4; }
		
		//fonctionAgregation = FonctionAgregation
		public Assignment getFonctionAgregationAssignment_5() { return cFonctionAgregationAssignment_5; }
		
		//FonctionAgregation
		public RuleCall getFonctionAgregationFonctionAgregationEnumRuleCall_5_0() { return cFonctionAgregationFonctionAgregationEnumRuleCall_5_0; }
	}
	public class FilterNotNullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.projet1.MyDsl.FilterNotNull");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotNullKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//FilterNotNull returns FilterNotNull:
		//    "NotNull" ":" name = EString
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//"NotNull" ":" name = EString
		public Group getGroup() { return cGroup; }
		
		//"NotNull"
		public Keyword getNotNullKeyword_0() { return cNotNullKeyword_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//name = EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class FilterCompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.projet1.MyDsl.FilterCompare");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCompareQualiParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompareQuantiParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FilterCompare returns FilterCompare:
		//    CompareQuali | CompareQuanti
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//CompareQuali | CompareQuanti
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CompareQuali
		public RuleCall getCompareQualiParserRuleCall_0() { return cCompareQualiParserRuleCall_0; }
		
		//CompareQuanti
		public RuleCall getCompareQuantiParserRuleCall_1() { return cCompareQuantiParserRuleCall_1; }
	}
	public class CompareQualiElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.projet1.MyDsl.CompareQuali");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComparisonColumnsWithStringKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cComparaisonAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cComparaisonFonctionComparaisonQualiEnumRuleCall_2_0 = (RuleCall)cComparaisonAssignment_2.eContents().get(0);
		private final Assignment cSomethingtocompareAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSomethingtocompareEStringParserRuleCall_3_0 = (RuleCall)cSomethingtocompareAssignment_3.eContents().get(0);
		
		//CompareQuali returns CompareQuali:
		//    "ComparisonColumnsWithString"
		//    (name=EString) (comparaison=FonctionComparaisonQuali) (somethingtocompare=EString)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"ComparisonColumnsWithString"
		//(name=EString) (comparaison=FonctionComparaisonQuali) (somethingtocompare=EString)
		public Group getGroup() { return cGroup; }
		
		//"ComparisonColumnsWithString"
		public Keyword getComparisonColumnsWithStringKeyword_0() { return cComparisonColumnsWithStringKeyword_0; }
		
		//(name=EString)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//(comparaison=FonctionComparaisonQuali)
		public Assignment getComparaisonAssignment_2() { return cComparaisonAssignment_2; }
		
		//FonctionComparaisonQuali
		public RuleCall getComparaisonFonctionComparaisonQualiEnumRuleCall_2_0() { return cComparaisonFonctionComparaisonQualiEnumRuleCall_2_0; }
		
		//(somethingtocompare=EString)
		public Assignment getSomethingtocompareAssignment_3() { return cSomethingtocompareAssignment_3; }
		
		//EString
		public RuleCall getSomethingtocompareEStringParserRuleCall_3_0() { return cSomethingtocompareEStringParserRuleCall_3_0; }
	}
	public class CompareQuantiElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.projet1.MyDsl.CompareQuanti");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComparisonColumnsWithNumberKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cComparaisonAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cComparaisonFonctionComparaisonQuantiEnumRuleCall_2_0 = (RuleCall)cComparaisonAssignment_2.eContents().get(0);
		private final Assignment cSomethingtocompareAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSomethingtocompareEStringParserRuleCall_3_0 = (RuleCall)cSomethingtocompareAssignment_3.eContents().get(0);
		
		//CompareQuanti returns CompareQuanti:
		//    "ComparisonColumnsWithNumber"
		//    (name=EString) (comparaison=FonctionComparaisonQuanti) (somethingtocompare=EString)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"ComparisonColumnsWithNumber"
		//(name=EString) (comparaison=FonctionComparaisonQuanti) (somethingtocompare=EString)
		public Group getGroup() { return cGroup; }
		
		//"ComparisonColumnsWithNumber"
		public Keyword getComparisonColumnsWithNumberKeyword_0() { return cComparisonColumnsWithNumberKeyword_0; }
		
		//(name=EString)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//(comparaison=FonctionComparaisonQuanti)
		public Assignment getComparaisonAssignment_2() { return cComparaisonAssignment_2; }
		
		//FonctionComparaisonQuanti
		public RuleCall getComparaisonFonctionComparaisonQuantiEnumRuleCall_2_0() { return cComparaisonFonctionComparaisonQuantiEnumRuleCall_2_0; }
		
		//(somethingtocompare=EString)
		public Assignment getSomethingtocompareAssignment_3() { return cSomethingtocompareAssignment_3; }
		
		//EString
		public RuleCall getSomethingtocompareEStringParserRuleCall_3_0() { return cSomethingtocompareEStringParserRuleCall_3_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.projet1.MyDsl.EString");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING ;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	
	public class TypeGraphElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.projet1.MyDsl.TypeGraph");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBarEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBarBarKeyword_0_0 = (Keyword)cBarEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cScatterEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cScatterLineKeyword_1_0 = (Keyword)cScatterEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBoxEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBoxNuageDePointKeyword_2_0 = (Keyword)cBoxEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum TypeGraph returns TypeGraph:
		//    Bar = 'Bar' | Scatter = "Line" | Box ="Nuage de point"
		//;
		public EnumRule getRule() { return rule; }
		
		//Bar = 'Bar' | Scatter = "Line" | Box ="Nuage de point"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Bar = 'Bar'
		public EnumLiteralDeclaration getBarEnumLiteralDeclaration_0() { return cBarEnumLiteralDeclaration_0; }
		
		//'Bar'
		public Keyword getBarBarKeyword_0_0() { return cBarBarKeyword_0_0; }
		
		//Scatter = "Line"
		public EnumLiteralDeclaration getScatterEnumLiteralDeclaration_1() { return cScatterEnumLiteralDeclaration_1; }
		
		//"Line"
		public Keyword getScatterLineKeyword_1_0() { return cScatterLineKeyword_1_0; }
		
		//Box ="Nuage de point"
		public EnumLiteralDeclaration getBoxEnumLiteralDeclaration_2() { return cBoxEnumLiteralDeclaration_2; }
		
		//"Nuage de point"
		public Keyword getBoxNuageDePointKeyword_2_0() { return cBoxNuageDePointKeyword_2_0; }
	}
	public class FonctionAgregationElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.projet1.MyDsl.FonctionAgregation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMedianEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMedianMedianKeyword_0_0 = (Keyword)cMedianEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSumEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSumSumKeyword_1_0 = (Keyword)cSumEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMeanEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMeanMeanKeyword_2_0 = (Keyword)cMeanEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMinEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMinMinKeyword_3_0 = (Keyword)cMinEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMaxEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMaxMaxKeyword_4_0 = (Keyword)cMaxEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cCountEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cCountCountKeyword_5_0 = (Keyword)cCountEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cStdEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cStdStdKeyword_6_0 = (Keyword)cStdEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cVarEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cVarVarKeyword_7_0 = (Keyword)cVarEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum FonctionAgregation returns FonctionAgregation:
		//    median = 'median' | sum = 'sum' | mean = "mean" | min = "min" | max = "max" | count = "count" | std ="std" | var= "var"
		//;
		public EnumRule getRule() { return rule; }
		
		//median = 'median' | sum = 'sum' | mean = "mean" | min = "min" | max = "max" | count = "count" | std ="std" | var= "var"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//median = 'median'
		public EnumLiteralDeclaration getMedianEnumLiteralDeclaration_0() { return cMedianEnumLiteralDeclaration_0; }
		
		//'median'
		public Keyword getMedianMedianKeyword_0_0() { return cMedianMedianKeyword_0_0; }
		
		//sum = 'sum'
		public EnumLiteralDeclaration getSumEnumLiteralDeclaration_1() { return cSumEnumLiteralDeclaration_1; }
		
		//'sum'
		public Keyword getSumSumKeyword_1_0() { return cSumSumKeyword_1_0; }
		
		//mean = "mean"
		public EnumLiteralDeclaration getMeanEnumLiteralDeclaration_2() { return cMeanEnumLiteralDeclaration_2; }
		
		//"mean"
		public Keyword getMeanMeanKeyword_2_0() { return cMeanMeanKeyword_2_0; }
		
		//min = "min"
		public EnumLiteralDeclaration getMinEnumLiteralDeclaration_3() { return cMinEnumLiteralDeclaration_3; }
		
		//"min"
		public Keyword getMinMinKeyword_3_0() { return cMinMinKeyword_3_0; }
		
		//max = "max"
		public EnumLiteralDeclaration getMaxEnumLiteralDeclaration_4() { return cMaxEnumLiteralDeclaration_4; }
		
		//"max"
		public Keyword getMaxMaxKeyword_4_0() { return cMaxMaxKeyword_4_0; }
		
		//count = "count"
		public EnumLiteralDeclaration getCountEnumLiteralDeclaration_5() { return cCountEnumLiteralDeclaration_5; }
		
		//"count"
		public Keyword getCountCountKeyword_5_0() { return cCountCountKeyword_5_0; }
		
		//std ="std"
		public EnumLiteralDeclaration getStdEnumLiteralDeclaration_6() { return cStdEnumLiteralDeclaration_6; }
		
		//"std"
		public Keyword getStdStdKeyword_6_0() { return cStdStdKeyword_6_0; }
		
		//var= "var"
		public EnumLiteralDeclaration getVarEnumLiteralDeclaration_7() { return cVarEnumLiteralDeclaration_7; }
		
		//"var"
		public Keyword getVarVarKeyword_7_0() { return cVarVarKeyword_7_0; }
	}
	public class FonctionComparaisonQuantiElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.projet1.MyDsl.FonctionComparaisonQuanti");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInfEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInfLessThanSignKeyword_0_0 = (Keyword)cInfEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSupEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSupGreaterThanSignKeyword_1_0 = (Keyword)cSupEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEgalEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEgalEqualsSignEqualsSignKeyword_2_0 = (Keyword)cEgalEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDifferentEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDifferentExclamationMarkEqualsSignKeyword_3_0 = (Keyword)cDifferentEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSupegalEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSupegalGreaterThanSignEqualsSignKeyword_4_0 = (Keyword)cSupegalEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cInfegalEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cInfegalLessThanSignEqualsSignKeyword_5_0 = (Keyword)cInfegalEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum FonctionComparaisonQuanti returns FonctionComparaisonQuanti:
		//    inf = '<' | sup = '>' | egal = '==' | different = '!=' | supegal = '>=' | infegal = '<='
		//;
		public EnumRule getRule() { return rule; }
		
		//inf = '<' | sup = '>' | egal = '==' | different = '!=' | supegal = '>=' | infegal = '<='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//inf = '<'
		public EnumLiteralDeclaration getInfEnumLiteralDeclaration_0() { return cInfEnumLiteralDeclaration_0; }
		
		//'<'
		public Keyword getInfLessThanSignKeyword_0_0() { return cInfLessThanSignKeyword_0_0; }
		
		//sup = '>'
		public EnumLiteralDeclaration getSupEnumLiteralDeclaration_1() { return cSupEnumLiteralDeclaration_1; }
		
		//'>'
		public Keyword getSupGreaterThanSignKeyword_1_0() { return cSupGreaterThanSignKeyword_1_0; }
		
		//egal = '=='
		public EnumLiteralDeclaration getEgalEnumLiteralDeclaration_2() { return cEgalEnumLiteralDeclaration_2; }
		
		//'=='
		public Keyword getEgalEqualsSignEqualsSignKeyword_2_0() { return cEgalEqualsSignEqualsSignKeyword_2_0; }
		
		//different = '!='
		public EnumLiteralDeclaration getDifferentEnumLiteralDeclaration_3() { return cDifferentEnumLiteralDeclaration_3; }
		
		//'!='
		public Keyword getDifferentExclamationMarkEqualsSignKeyword_3_0() { return cDifferentExclamationMarkEqualsSignKeyword_3_0; }
		
		//supegal = '>='
		public EnumLiteralDeclaration getSupegalEnumLiteralDeclaration_4() { return cSupegalEnumLiteralDeclaration_4; }
		
		//'>='
		public Keyword getSupegalGreaterThanSignEqualsSignKeyword_4_0() { return cSupegalGreaterThanSignEqualsSignKeyword_4_0; }
		
		//infegal = '<='
		public EnumLiteralDeclaration getInfegalEnumLiteralDeclaration_5() { return cInfegalEnumLiteralDeclaration_5; }
		
		//'<='
		public Keyword getInfegalLessThanSignEqualsSignKeyword_5_0() { return cInfegalLessThanSignEqualsSignKeyword_5_0; }
	}
	public class FonctionComparaisonQualiElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.projet1.MyDsl.FonctionComparaisonQuali");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEgalEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEgalEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEgalEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDifferentEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDifferentExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cDifferentEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum FonctionComparaisonQuali returns FonctionComparaisonQuali:
		//    egal = '==' | different = '!='
		//;
		public EnumRule getRule() { return rule; }
		
		//egal = '==' | different = '!='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//egal = '=='
		public EnumLiteralDeclaration getEgalEnumLiteralDeclaration_0() { return cEgalEnumLiteralDeclaration_0; }
		
		//'=='
		public Keyword getEgalEqualsSignEqualsSignKeyword_0_0() { return cEgalEqualsSignEqualsSignKeyword_0_0; }
		
		//different = '!='
		public EnumLiteralDeclaration getDifferentEnumLiteralDeclaration_1() { return cDifferentEnumLiteralDeclaration_1; }
		
		//'!='
		public Keyword getDifferentExclamationMarkEqualsSignKeyword_1_0() { return cDifferentExclamationMarkEqualsSignKeyword_1_0; }
	}
	
	private final DashboardElements pDashboard;
	private final GraphRealisationElements pGraphRealisation;
	private final ImportFileElements pImportFile;
	private final GraphMakerElements pGraphMaker;
	private final TypeGraphElements eTypeGraph;
	private final GraphUpdateElements pGraphUpdate;
	private final UpdateCouleurGraphElements pUpdateCouleurGraph;
	private final UpdateNameLegendElements pUpdateNameLegend;
	private final UpdateNameAxeXElements pUpdateNameAxeX;
	private final UpdateNameAxeYElements pUpdateNameAxeY;
	private final FilterDataElements pFilterData;
	private final FilterGroupByElements pFilterGroupBy;
	private final FonctionAgregationElements eFonctionAgregation;
	private final FilterNotNullElements pFilterNotNull;
	private final FilterCompareElements pFilterCompare;
	private final CompareQualiElements pCompareQuali;
	private final CompareQuantiElements pCompareQuanti;
	private final FonctionComparaisonQuantiElements eFonctionComparaisonQuanti;
	private final FonctionComparaisonQualiElements eFonctionComparaisonQuali;
	private final EStringElements pEString;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDashboard = new DashboardElements();
		this.pGraphRealisation = new GraphRealisationElements();
		this.pImportFile = new ImportFileElements();
		this.pGraphMaker = new GraphMakerElements();
		this.eTypeGraph = new TypeGraphElements();
		this.pGraphUpdate = new GraphUpdateElements();
		this.pUpdateCouleurGraph = new UpdateCouleurGraphElements();
		this.pUpdateNameLegend = new UpdateNameLegendElements();
		this.pUpdateNameAxeX = new UpdateNameAxeXElements();
		this.pUpdateNameAxeY = new UpdateNameAxeYElements();
		this.pFilterData = new FilterDataElements();
		this.pFilterGroupBy = new FilterGroupByElements();
		this.eFonctionAgregation = new FonctionAgregationElements();
		this.pFilterNotNull = new FilterNotNullElements();
		this.pFilterCompare = new FilterCompareElements();
		this.pCompareQuali = new CompareQualiElements();
		this.pCompareQuanti = new CompareQuantiElements();
		this.eFonctionComparaisonQuanti = new FonctionComparaisonQuantiElements();
		this.eFonctionComparaisonQuali = new FonctionComparaisonQualiElements();
		this.pEString = new EStringElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.projet1.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Dashboard returns Dashboard :
	//    "NameDashboard" ":" name = EString
	//    (ownedGraphRealisation += GraphRealisation)*
	//;
	public DashboardElements getDashboardAccess() {
		return pDashboard;
	}
	
	public ParserRule getDashboardRule() {
		return getDashboardAccess().getRule();
	}
	
	//GraphRealisation returns GraphRealisation:
	//    (ownedImport = ImportFile)
	//    (ownedGraphMaker = GraphMaker)
	//    (ownedFilter += FilterData)*
	//    (ownedGraphUpdate += GraphUpdate)*
	//    ;
	public GraphRealisationElements getGraphRealisationAccess() {
		return pGraphRealisation;
	}
	
	public ParserRule getGraphRealisationRule() {
		return getGraphRealisationAccess().getRule();
	}
	
	//ImportFile returns ImportData:
	//    "CSV" ":" (name = EString)
	//    "Delimiter" ":" (delimeter = EString)
	//    ;
	public ImportFileElements getImportFileAccess() {
		return pImportFile;
	}
	
	public ParserRule getImportFileRule() {
		return getImportFileAccess().getRule();
	}
	
	//GraphMaker returns GraphMaker :
	//    'TypeOfGraph'':' type = TypeGraph
	//    'Abscissa' ':' nameAbscisse = EString
	//    'Ordinate(s)' ':' (nameOrdonnees += EString) +
	//;
	public GraphMakerElements getGraphMakerAccess() {
		return pGraphMaker;
	}
	
	public ParserRule getGraphMakerRule() {
		return getGraphMakerAccess().getRule();
	}
	
	//enum TypeGraph returns TypeGraph:
	//    Bar = 'Bar' | Scatter = "Line" | Box ="Nuage de point"
	//;
	public TypeGraphElements getTypeGraphAccess() {
		return eTypeGraph;
	}
	
	public EnumRule getTypeGraphRule() {
		return getTypeGraphAccess().getRule();
	}
	
	//GraphUpdate returns GraphUpdate :
	//    UpdateNameAxeX | UpdateNameAxeY | UpdateNameLegend | UpdateCouleurGraph
	//;
	public GraphUpdateElements getGraphUpdateAccess() {
		return pGraphUpdate;
	}
	
	public ParserRule getGraphUpdateRule() {
		return getGraphUpdateAccess().getRule();
	}
	
	//UpdateCouleurGraph returns UpdateCouleurGraph :
	//    "Color(s)" "graph" ":" (couleur += EString)+
	//;
	public UpdateCouleurGraphElements getUpdateCouleurGraphAccess() {
		return pUpdateCouleurGraph;
	}
	
	public ParserRule getUpdateCouleurGraphRule() {
		return getUpdateCouleurGraphAccess().getRule();
	}
	
	//UpdateNameLegend returns UpdateNameLegend:
	//    "Transformation" oldname = EString "in" newname = EString
	//;
	public UpdateNameLegendElements getUpdateNameLegendAccess() {
		return pUpdateNameLegend;
	}
	
	public ParserRule getUpdateNameLegendRule() {
		return getUpdateNameLegendAccess().getRule();
	}
	
	//UpdateNameAxeX returns UpdateNameAxeX :
	//    "TitleAxeX" ':' name = EString
	//;
	public UpdateNameAxeXElements getUpdateNameAxeXAccess() {
		return pUpdateNameAxeX;
	}
	
	public ParserRule getUpdateNameAxeXRule() {
		return getUpdateNameAxeXAccess().getRule();
	}
	
	//UpdateNameAxeY returns UpdateNameAxeY :
	//    "TitleAxeY"  ':' name = EString
	//;
	public UpdateNameAxeYElements getUpdateNameAxeYAccess() {
		return pUpdateNameAxeY;
	}
	
	public ParserRule getUpdateNameAxeYRule() {
		return getUpdateNameAxeYAccess().getRule();
	}
	
	//FilterData returns FilterData:
	//    FilterNotNull | FilterCompare | FilterGroupBy
	//;
	public FilterDataElements getFilterDataAccess() {
		return pFilterData;
	}
	
	public ParserRule getFilterDataRule() {
		return getFilterDataAccess().getRule();
	}
	
	//FilterGroupBy returns FilterGroupBy :
	//    "Group" nameColumnsY= EString "by" nameColumnsX= EString "in" fonctionAgregation = FonctionAgregation
	//;
	public FilterGroupByElements getFilterGroupByAccess() {
		return pFilterGroupBy;
	}
	
	public ParserRule getFilterGroupByRule() {
		return getFilterGroupByAccess().getRule();
	}
	
	//enum FonctionAgregation returns FonctionAgregation:
	//    median = 'median' | sum = 'sum' | mean = "mean" | min = "min" | max = "max" | count = "count" | std ="std" | var= "var"
	//;
	public FonctionAgregationElements getFonctionAgregationAccess() {
		return eFonctionAgregation;
	}
	
	public EnumRule getFonctionAgregationRule() {
		return getFonctionAgregationAccess().getRule();
	}
	
	//FilterNotNull returns FilterNotNull:
	//    "NotNull" ":" name = EString
	//    ;
	public FilterNotNullElements getFilterNotNullAccess() {
		return pFilterNotNull;
	}
	
	public ParserRule getFilterNotNullRule() {
		return getFilterNotNullAccess().getRule();
	}
	
	//FilterCompare returns FilterCompare:
	//    CompareQuali | CompareQuanti
	//    ;
	public FilterCompareElements getFilterCompareAccess() {
		return pFilterCompare;
	}
	
	public ParserRule getFilterCompareRule() {
		return getFilterCompareAccess().getRule();
	}
	
	//CompareQuali returns CompareQuali:
	//    "ComparisonColumnsWithString"
	//    (name=EString) (comparaison=FonctionComparaisonQuali) (somethingtocompare=EString)
	//;
	public CompareQualiElements getCompareQualiAccess() {
		return pCompareQuali;
	}
	
	public ParserRule getCompareQualiRule() {
		return getCompareQualiAccess().getRule();
	}
	
	//CompareQuanti returns CompareQuanti:
	//    "ComparisonColumnsWithNumber"
	//    (name=EString) (comparaison=FonctionComparaisonQuanti) (somethingtocompare=EString)
	//;
	public CompareQuantiElements getCompareQuantiAccess() {
		return pCompareQuanti;
	}
	
	public ParserRule getCompareQuantiRule() {
		return getCompareQuantiAccess().getRule();
	}
	
	//enum FonctionComparaisonQuanti returns FonctionComparaisonQuanti:
	//    inf = '<' | sup = '>' | egal = '==' | different = '!=' | supegal = '>=' | infegal = '<='
	//;
	public FonctionComparaisonQuantiElements getFonctionComparaisonQuantiAccess() {
		return eFonctionComparaisonQuanti;
	}
	
	public EnumRule getFonctionComparaisonQuantiRule() {
		return getFonctionComparaisonQuantiAccess().getRule();
	}
	
	//enum FonctionComparaisonQuali returns FonctionComparaisonQuali:
	//    egal = '==' | different = '!='
	//;
	public FonctionComparaisonQualiElements getFonctionComparaisonQualiAccess() {
		return eFonctionComparaisonQuali;
	}
	
	public EnumRule getFonctionComparaisonQualiRule() {
		return getFonctionComparaisonQualiAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING ;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
