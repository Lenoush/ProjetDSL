/*
 * generated by Xtext 2.25.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.projet1.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.projet1.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.projet1.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleDashboard
entryRuleDashboard
:
{ before(grammarAccess.getDashboardRule()); }
	 ruleDashboard
{ after(grammarAccess.getDashboardRule()); } 
	 EOF 
;

// Rule Dashboard
ruleDashboard 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDashboardAccess().getGroup()); }
		(rule__Dashboard__Group__0)
		{ after(grammarAccess.getDashboardAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGraphRealisation
entryRuleGraphRealisation
:
{ before(grammarAccess.getGraphRealisationRule()); }
	 ruleGraphRealisation
{ after(grammarAccess.getGraphRealisationRule()); } 
	 EOF 
;

// Rule GraphRealisation
ruleGraphRealisation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGraphRealisationAccess().getGroup()); }
		(rule__GraphRealisation__Group__0)
		{ after(grammarAccess.getGraphRealisationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImportFile
entryRuleImportFile
:
{ before(grammarAccess.getImportFileRule()); }
	 ruleImportFile
{ after(grammarAccess.getImportFileRule()); } 
	 EOF 
;

// Rule ImportFile
ruleImportFile 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImportFileAccess().getGroup()); }
		(rule__ImportFile__Group__0)
		{ after(grammarAccess.getImportFileAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGraphMaker
entryRuleGraphMaker
:
{ before(grammarAccess.getGraphMakerRule()); }
	 ruleGraphMaker
{ after(grammarAccess.getGraphMakerRule()); } 
	 EOF 
;

// Rule GraphMaker
ruleGraphMaker 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGraphMakerAccess().getGroup()); }
		(rule__GraphMaker__Group__0)
		{ after(grammarAccess.getGraphMakerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGraphUpdate
entryRuleGraphUpdate
:
{ before(grammarAccess.getGraphUpdateRule()); }
	 ruleGraphUpdate
{ after(grammarAccess.getGraphUpdateRule()); } 
	 EOF 
;

// Rule GraphUpdate
ruleGraphUpdate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGraphUpdateAccess().getAlternatives()); }
		(rule__GraphUpdate__Alternatives)
		{ after(grammarAccess.getGraphUpdateAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUpdateCouleurGraph
entryRuleUpdateCouleurGraph
:
{ before(grammarAccess.getUpdateCouleurGraphRule()); }
	 ruleUpdateCouleurGraph
{ after(grammarAccess.getUpdateCouleurGraphRule()); } 
	 EOF 
;

// Rule UpdateCouleurGraph
ruleUpdateCouleurGraph 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUpdateCouleurGraphAccess().getGroup()); }
		(rule__UpdateCouleurGraph__Group__0)
		{ after(grammarAccess.getUpdateCouleurGraphAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUpdateNameLegend
entryRuleUpdateNameLegend
:
{ before(grammarAccess.getUpdateNameLegendRule()); }
	 ruleUpdateNameLegend
{ after(grammarAccess.getUpdateNameLegendRule()); } 
	 EOF 
;

// Rule UpdateNameLegend
ruleUpdateNameLegend 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUpdateNameLegendAccess().getGroup()); }
		(rule__UpdateNameLegend__Group__0)
		{ after(grammarAccess.getUpdateNameLegendAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUpdateNameAxeX
entryRuleUpdateNameAxeX
:
{ before(grammarAccess.getUpdateNameAxeXRule()); }
	 ruleUpdateNameAxeX
{ after(grammarAccess.getUpdateNameAxeXRule()); } 
	 EOF 
;

// Rule UpdateNameAxeX
ruleUpdateNameAxeX 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUpdateNameAxeXAccess().getGroup()); }
		(rule__UpdateNameAxeX__Group__0)
		{ after(grammarAccess.getUpdateNameAxeXAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUpdateNameAxeY
entryRuleUpdateNameAxeY
:
{ before(grammarAccess.getUpdateNameAxeYRule()); }
	 ruleUpdateNameAxeY
{ after(grammarAccess.getUpdateNameAxeYRule()); } 
	 EOF 
;

// Rule UpdateNameAxeY
ruleUpdateNameAxeY 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUpdateNameAxeYAccess().getGroup()); }
		(rule__UpdateNameAxeY__Group__0)
		{ after(grammarAccess.getUpdateNameAxeYAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFilterData
entryRuleFilterData
:
{ before(grammarAccess.getFilterDataRule()); }
	 ruleFilterData
{ after(grammarAccess.getFilterDataRule()); } 
	 EOF 
;

// Rule FilterData
ruleFilterData 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFilterDataAccess().getAlternatives()); }
		(rule__FilterData__Alternatives)
		{ after(grammarAccess.getFilterDataAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFilterGroupBy
entryRuleFilterGroupBy
:
{ before(grammarAccess.getFilterGroupByRule()); }
	 ruleFilterGroupBy
{ after(grammarAccess.getFilterGroupByRule()); } 
	 EOF 
;

// Rule FilterGroupBy
ruleFilterGroupBy 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFilterGroupByAccess().getGroup()); }
		(rule__FilterGroupBy__Group__0)
		{ after(grammarAccess.getFilterGroupByAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFilterNotNull
entryRuleFilterNotNull
:
{ before(grammarAccess.getFilterNotNullRule()); }
	 ruleFilterNotNull
{ after(grammarAccess.getFilterNotNullRule()); } 
	 EOF 
;

// Rule FilterNotNull
ruleFilterNotNull 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFilterNotNullAccess().getGroup()); }
		(rule__FilterNotNull__Group__0)
		{ after(grammarAccess.getFilterNotNullAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFilterCompare
entryRuleFilterCompare
:
{ before(grammarAccess.getFilterCompareRule()); }
	 ruleFilterCompare
{ after(grammarAccess.getFilterCompareRule()); } 
	 EOF 
;

// Rule FilterCompare
ruleFilterCompare 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFilterCompareAccess().getAlternatives()); }
		(rule__FilterCompare__Alternatives)
		{ after(grammarAccess.getFilterCompareAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCompareQuali
entryRuleCompareQuali
:
{ before(grammarAccess.getCompareQualiRule()); }
	 ruleCompareQuali
{ after(grammarAccess.getCompareQualiRule()); } 
	 EOF 
;

// Rule CompareQuali
ruleCompareQuali 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCompareQualiAccess().getGroup()); }
		(rule__CompareQuali__Group__0)
		{ after(grammarAccess.getCompareQualiAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCompareQuanti
entryRuleCompareQuanti
:
{ before(grammarAccess.getCompareQuantiRule()); }
	 ruleCompareQuanti
{ after(grammarAccess.getCompareQuantiRule()); } 
	 EOF 
;

// Rule CompareQuanti
ruleCompareQuanti 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCompareQuantiAccess().getGroup()); }
		(rule__CompareQuanti__Group__0)
		{ after(grammarAccess.getCompareQuantiAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule TypeGraph
ruleTypeGraph
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeGraphAccess().getAlternatives()); }
		(rule__TypeGraph__Alternatives)
		{ after(grammarAccess.getTypeGraphAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule FonctionAgregation
ruleFonctionAgregation
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFonctionAgregationAccess().getAlternatives()); }
		(rule__FonctionAgregation__Alternatives)
		{ after(grammarAccess.getFonctionAgregationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule FonctionComparaisonQuanti
ruleFonctionComparaisonQuanti
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFonctionComparaisonQuantiAccess().getAlternatives()); }
		(rule__FonctionComparaisonQuanti__Alternatives)
		{ after(grammarAccess.getFonctionComparaisonQuantiAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule FonctionComparaisonQuali
ruleFonctionComparaisonQuali
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFonctionComparaisonQualiAccess().getAlternatives()); }
		(rule__FonctionComparaisonQuali__Alternatives)
		{ after(grammarAccess.getFonctionComparaisonQualiAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphUpdate__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGraphUpdateAccess().getUpdateNameAxeXParserRuleCall_0()); }
		ruleUpdateNameAxeX
		{ after(grammarAccess.getGraphUpdateAccess().getUpdateNameAxeXParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getGraphUpdateAccess().getUpdateNameAxeYParserRuleCall_1()); }
		ruleUpdateNameAxeY
		{ after(grammarAccess.getGraphUpdateAccess().getUpdateNameAxeYParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getGraphUpdateAccess().getUpdateNameLegendParserRuleCall_2()); }
		ruleUpdateNameLegend
		{ after(grammarAccess.getGraphUpdateAccess().getUpdateNameLegendParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getGraphUpdateAccess().getUpdateCouleurGraphParserRuleCall_3()); }
		ruleUpdateCouleurGraph
		{ after(grammarAccess.getGraphUpdateAccess().getUpdateCouleurGraphParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterData__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFilterDataAccess().getFilterNotNullParserRuleCall_0()); }
		ruleFilterNotNull
		{ after(grammarAccess.getFilterDataAccess().getFilterNotNullParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getFilterDataAccess().getFilterCompareParserRuleCall_1()); }
		ruleFilterCompare
		{ after(grammarAccess.getFilterDataAccess().getFilterCompareParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getFilterDataAccess().getFilterGroupByParserRuleCall_2()); }
		ruleFilterGroupBy
		{ after(grammarAccess.getFilterDataAccess().getFilterGroupByParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterCompare__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFilterCompareAccess().getCompareQualiParserRuleCall_0()); }
		ruleCompareQuali
		{ after(grammarAccess.getFilterCompareAccess().getCompareQualiParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getFilterCompareAccess().getCompareQuantiParserRuleCall_1()); }
		ruleCompareQuanti
		{ after(grammarAccess.getFilterCompareAccess().getCompareQuantiParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeGraph__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeGraphAccess().getBarEnumLiteralDeclaration_0()); }
		('Bar')
		{ after(grammarAccess.getTypeGraphAccess().getBarEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeGraphAccess().getScatterEnumLiteralDeclaration_1()); }
		('Line')
		{ after(grammarAccess.getTypeGraphAccess().getScatterEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeGraphAccess().getBoxEnumLiteralDeclaration_2()); }
		('Nuage de point')
		{ after(grammarAccess.getTypeGraphAccess().getBoxEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FonctionAgregation__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFonctionAgregationAccess().getMedianEnumLiteralDeclaration_0()); }
		('median')
		{ after(grammarAccess.getFonctionAgregationAccess().getMedianEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getFonctionAgregationAccess().getSumEnumLiteralDeclaration_1()); }
		('sum')
		{ after(grammarAccess.getFonctionAgregationAccess().getSumEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getFonctionAgregationAccess().getMeanEnumLiteralDeclaration_2()); }
		('mean')
		{ after(grammarAccess.getFonctionAgregationAccess().getMeanEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getFonctionAgregationAccess().getMinEnumLiteralDeclaration_3()); }
		('min')
		{ after(grammarAccess.getFonctionAgregationAccess().getMinEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getFonctionAgregationAccess().getMaxEnumLiteralDeclaration_4()); }
		('max')
		{ after(grammarAccess.getFonctionAgregationAccess().getMaxEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getFonctionAgregationAccess().getCountEnumLiteralDeclaration_5()); }
		('count')
		{ after(grammarAccess.getFonctionAgregationAccess().getCountEnumLiteralDeclaration_5()); }
	)
	|
	(
		{ before(grammarAccess.getFonctionAgregationAccess().getStdEnumLiteralDeclaration_6()); }
		('std')
		{ after(grammarAccess.getFonctionAgregationAccess().getStdEnumLiteralDeclaration_6()); }
	)
	|
	(
		{ before(grammarAccess.getFonctionAgregationAccess().getVarEnumLiteralDeclaration_7()); }
		('var')
		{ after(grammarAccess.getFonctionAgregationAccess().getVarEnumLiteralDeclaration_7()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FonctionComparaisonQuanti__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFonctionComparaisonQuantiAccess().getInfEnumLiteralDeclaration_0()); }
		('<')
		{ after(grammarAccess.getFonctionComparaisonQuantiAccess().getInfEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getFonctionComparaisonQuantiAccess().getSupEnumLiteralDeclaration_1()); }
		('>')
		{ after(grammarAccess.getFonctionComparaisonQuantiAccess().getSupEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getFonctionComparaisonQuantiAccess().getEgalEnumLiteralDeclaration_2()); }
		('==')
		{ after(grammarAccess.getFonctionComparaisonQuantiAccess().getEgalEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getFonctionComparaisonQuantiAccess().getDifferentEnumLiteralDeclaration_3()); }
		('!=')
		{ after(grammarAccess.getFonctionComparaisonQuantiAccess().getDifferentEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getFonctionComparaisonQuantiAccess().getSupegalEnumLiteralDeclaration_4()); }
		('>=')
		{ after(grammarAccess.getFonctionComparaisonQuantiAccess().getSupegalEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getFonctionComparaisonQuantiAccess().getInfegalEnumLiteralDeclaration_5()); }
		('<=')
		{ after(grammarAccess.getFonctionComparaisonQuantiAccess().getInfegalEnumLiteralDeclaration_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FonctionComparaisonQuali__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFonctionComparaisonQualiAccess().getEgalEnumLiteralDeclaration_0()); }
		('==')
		{ after(grammarAccess.getFonctionComparaisonQualiAccess().getEgalEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getFonctionComparaisonQualiAccess().getDifferentEnumLiteralDeclaration_1()); }
		('!=')
		{ after(grammarAccess.getFonctionComparaisonQualiAccess().getDifferentEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dashboard__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dashboard__Group__0__Impl
	rule__Dashboard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dashboard__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDashboardAccess().getNameDashboardKeyword_0()); }
	'NameDashboard'
	{ after(grammarAccess.getDashboardAccess().getNameDashboardKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dashboard__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dashboard__Group__1__Impl
	rule__Dashboard__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Dashboard__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDashboardAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getDashboardAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dashboard__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dashboard__Group__2__Impl
	rule__Dashboard__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Dashboard__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDashboardAccess().getNameAssignment_2()); }
	(rule__Dashboard__NameAssignment_2)
	{ after(grammarAccess.getDashboardAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dashboard__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dashboard__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dashboard__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDashboardAccess().getOwnedGraphRealisationAssignment_3()); }
	(rule__Dashboard__OwnedGraphRealisationAssignment_3)*
	{ after(grammarAccess.getDashboardAccess().getOwnedGraphRealisationAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GraphRealisation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GraphRealisation__Group__0__Impl
	rule__GraphRealisation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphRealisation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphRealisationAccess().getOwnedImportAssignment_0()); }
	(rule__GraphRealisation__OwnedImportAssignment_0)
	{ after(grammarAccess.getGraphRealisationAccess().getOwnedImportAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphRealisation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GraphRealisation__Group__1__Impl
	rule__GraphRealisation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphRealisation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphRealisationAccess().getOwnedGraphMakerAssignment_1()); }
	(rule__GraphRealisation__OwnedGraphMakerAssignment_1)
	{ after(grammarAccess.getGraphRealisationAccess().getOwnedGraphMakerAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphRealisation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GraphRealisation__Group__2__Impl
	rule__GraphRealisation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphRealisation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphRealisationAccess().getOwnedFilterAssignment_2()); }
	(rule__GraphRealisation__OwnedFilterAssignment_2)*
	{ after(grammarAccess.getGraphRealisationAccess().getOwnedFilterAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphRealisation__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GraphRealisation__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphRealisation__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphRealisationAccess().getOwnedGraphUpdateAssignment_3()); }
	(rule__GraphRealisation__OwnedGraphUpdateAssignment_3)*
	{ after(grammarAccess.getGraphRealisationAccess().getOwnedGraphUpdateAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ImportFile__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportFile__Group__0__Impl
	rule__ImportFile__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportFile__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportFileAccess().getCSVKeyword_0()); }
	'CSV'
	{ after(grammarAccess.getImportFileAccess().getCSVKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportFile__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportFile__Group__1__Impl
	rule__ImportFile__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportFile__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportFileAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getImportFileAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportFile__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportFile__Group__2__Impl
	rule__ImportFile__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportFile__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportFileAccess().getNameAssignment_2()); }
	(rule__ImportFile__NameAssignment_2)
	{ after(grammarAccess.getImportFileAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportFile__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportFile__Group__3__Impl
	rule__ImportFile__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportFile__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportFileAccess().getDelimiterKeyword_3()); }
	'Delimiter'
	{ after(grammarAccess.getImportFileAccess().getDelimiterKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportFile__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportFile__Group__4__Impl
	rule__ImportFile__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportFile__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportFileAccess().getColonKeyword_4()); }
	':'
	{ after(grammarAccess.getImportFileAccess().getColonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportFile__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportFile__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportFile__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportFileAccess().getDelimeterAssignment_5()); }
	(rule__ImportFile__DelimeterAssignment_5)
	{ after(grammarAccess.getImportFileAccess().getDelimeterAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GraphMaker__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GraphMaker__Group__0__Impl
	rule__GraphMaker__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphMaker__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphMakerAccess().getTypeOfGraphKeyword_0()); }
	'TypeOfGraph'
	{ after(grammarAccess.getGraphMakerAccess().getTypeOfGraphKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphMaker__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GraphMaker__Group__1__Impl
	rule__GraphMaker__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphMaker__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphMakerAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getGraphMakerAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphMaker__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GraphMaker__Group__2__Impl
	rule__GraphMaker__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphMaker__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphMakerAccess().getTypeAssignment_2()); }
	(rule__GraphMaker__TypeAssignment_2)
	{ after(grammarAccess.getGraphMakerAccess().getTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphMaker__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GraphMaker__Group__3__Impl
	rule__GraphMaker__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphMaker__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphMakerAccess().getAbscissaKeyword_3()); }
	'Abscissa'
	{ after(grammarAccess.getGraphMakerAccess().getAbscissaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphMaker__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GraphMaker__Group__4__Impl
	rule__GraphMaker__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphMaker__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphMakerAccess().getColonKeyword_4()); }
	':'
	{ after(grammarAccess.getGraphMakerAccess().getColonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphMaker__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GraphMaker__Group__5__Impl
	rule__GraphMaker__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphMaker__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphMakerAccess().getNameAbscisseAssignment_5()); }
	(rule__GraphMaker__NameAbscisseAssignment_5)
	{ after(grammarAccess.getGraphMakerAccess().getNameAbscisseAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphMaker__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GraphMaker__Group__6__Impl
	rule__GraphMaker__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphMaker__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphMakerAccess().getOrdinateSKeyword_6()); }
	'Ordinate(s)'
	{ after(grammarAccess.getGraphMakerAccess().getOrdinateSKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphMaker__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GraphMaker__Group__7__Impl
	rule__GraphMaker__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphMaker__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphMakerAccess().getColonKeyword_7()); }
	':'
	{ after(grammarAccess.getGraphMakerAccess().getColonKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphMaker__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GraphMaker__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphMaker__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getGraphMakerAccess().getNameOrdonneesAssignment_8()); }
		(rule__GraphMaker__NameOrdonneesAssignment_8)
		{ after(grammarAccess.getGraphMakerAccess().getNameOrdonneesAssignment_8()); }
	)
	(
		{ before(grammarAccess.getGraphMakerAccess().getNameOrdonneesAssignment_8()); }
		(rule__GraphMaker__NameOrdonneesAssignment_8)*
		{ after(grammarAccess.getGraphMakerAccess().getNameOrdonneesAssignment_8()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UpdateCouleurGraph__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpdateCouleurGraph__Group__0__Impl
	rule__UpdateCouleurGraph__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateCouleurGraph__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateCouleurGraphAccess().getColorSKeyword_0()); }
	'Color(s)'
	{ after(grammarAccess.getUpdateCouleurGraphAccess().getColorSKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateCouleurGraph__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpdateCouleurGraph__Group__1__Impl
	rule__UpdateCouleurGraph__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateCouleurGraph__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateCouleurGraphAccess().getGraphKeyword_1()); }
	'graph'
	{ after(grammarAccess.getUpdateCouleurGraphAccess().getGraphKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateCouleurGraph__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpdateCouleurGraph__Group__2__Impl
	rule__UpdateCouleurGraph__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateCouleurGraph__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateCouleurGraphAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getUpdateCouleurGraphAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateCouleurGraph__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpdateCouleurGraph__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateCouleurGraph__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getUpdateCouleurGraphAccess().getCouleurAssignment_3()); }
		(rule__UpdateCouleurGraph__CouleurAssignment_3)
		{ after(grammarAccess.getUpdateCouleurGraphAccess().getCouleurAssignment_3()); }
	)
	(
		{ before(grammarAccess.getUpdateCouleurGraphAccess().getCouleurAssignment_3()); }
		(rule__UpdateCouleurGraph__CouleurAssignment_3)*
		{ after(grammarAccess.getUpdateCouleurGraphAccess().getCouleurAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UpdateNameLegend__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpdateNameLegend__Group__0__Impl
	rule__UpdateNameLegend__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateNameLegend__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateNameLegendAccess().getTransformationKeyword_0()); }
	'Transformation'
	{ after(grammarAccess.getUpdateNameLegendAccess().getTransformationKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateNameLegend__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpdateNameLegend__Group__1__Impl
	rule__UpdateNameLegend__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateNameLegend__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateNameLegendAccess().getOldnameAssignment_1()); }
	(rule__UpdateNameLegend__OldnameAssignment_1)
	{ after(grammarAccess.getUpdateNameLegendAccess().getOldnameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateNameLegend__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpdateNameLegend__Group__2__Impl
	rule__UpdateNameLegend__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateNameLegend__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateNameLegendAccess().getInKeyword_2()); }
	'in'
	{ after(grammarAccess.getUpdateNameLegendAccess().getInKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateNameLegend__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpdateNameLegend__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateNameLegend__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateNameLegendAccess().getNewnameAssignment_3()); }
	(rule__UpdateNameLegend__NewnameAssignment_3)
	{ after(grammarAccess.getUpdateNameLegendAccess().getNewnameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UpdateNameAxeX__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpdateNameAxeX__Group__0__Impl
	rule__UpdateNameAxeX__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateNameAxeX__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateNameAxeXAccess().getTitleAxeXKeyword_0()); }
	'TitleAxeX'
	{ after(grammarAccess.getUpdateNameAxeXAccess().getTitleAxeXKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateNameAxeX__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpdateNameAxeX__Group__1__Impl
	rule__UpdateNameAxeX__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateNameAxeX__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateNameAxeXAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getUpdateNameAxeXAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateNameAxeX__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpdateNameAxeX__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateNameAxeX__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateNameAxeXAccess().getNameAssignment_2()); }
	(rule__UpdateNameAxeX__NameAssignment_2)
	{ after(grammarAccess.getUpdateNameAxeXAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UpdateNameAxeY__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpdateNameAxeY__Group__0__Impl
	rule__UpdateNameAxeY__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateNameAxeY__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateNameAxeYAccess().getTitleAxeYKeyword_0()); }
	'TitleAxeY'
	{ after(grammarAccess.getUpdateNameAxeYAccess().getTitleAxeYKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateNameAxeY__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpdateNameAxeY__Group__1__Impl
	rule__UpdateNameAxeY__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateNameAxeY__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateNameAxeYAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getUpdateNameAxeYAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateNameAxeY__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpdateNameAxeY__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateNameAxeY__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpdateNameAxeYAccess().getNameAssignment_2()); }
	(rule__UpdateNameAxeY__NameAssignment_2)
	{ after(grammarAccess.getUpdateNameAxeYAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FilterGroupBy__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FilterGroupBy__Group__0__Impl
	rule__FilterGroupBy__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterGroupBy__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFilterGroupByAccess().getGroupKeyword_0()); }
	'Group'
	{ after(grammarAccess.getFilterGroupByAccess().getGroupKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterGroupBy__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FilterGroupBy__Group__1__Impl
	rule__FilterGroupBy__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterGroupBy__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFilterGroupByAccess().getNameColumnsYAssignment_1()); }
	(rule__FilterGroupBy__NameColumnsYAssignment_1)
	{ after(grammarAccess.getFilterGroupByAccess().getNameColumnsYAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterGroupBy__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FilterGroupBy__Group__2__Impl
	rule__FilterGroupBy__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterGroupBy__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFilterGroupByAccess().getByKeyword_2()); }
	'by'
	{ after(grammarAccess.getFilterGroupByAccess().getByKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterGroupBy__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FilterGroupBy__Group__3__Impl
	rule__FilterGroupBy__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterGroupBy__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFilterGroupByAccess().getNameColumnsXAssignment_3()); }
	(rule__FilterGroupBy__NameColumnsXAssignment_3)
	{ after(grammarAccess.getFilterGroupByAccess().getNameColumnsXAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterGroupBy__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FilterGroupBy__Group__4__Impl
	rule__FilterGroupBy__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterGroupBy__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFilterGroupByAccess().getInKeyword_4()); }
	'in'
	{ after(grammarAccess.getFilterGroupByAccess().getInKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterGroupBy__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FilterGroupBy__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterGroupBy__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFilterGroupByAccess().getFonctionAgregationAssignment_5()); }
	(rule__FilterGroupBy__FonctionAgregationAssignment_5)
	{ after(grammarAccess.getFilterGroupByAccess().getFonctionAgregationAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FilterNotNull__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FilterNotNull__Group__0__Impl
	rule__FilterNotNull__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterNotNull__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFilterNotNullAccess().getNotNullKeyword_0()); }
	'NotNull'
	{ after(grammarAccess.getFilterNotNullAccess().getNotNullKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterNotNull__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FilterNotNull__Group__1__Impl
	rule__FilterNotNull__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterNotNull__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFilterNotNullAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getFilterNotNullAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterNotNull__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FilterNotNull__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterNotNull__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFilterNotNullAccess().getNameAssignment_2()); }
	(rule__FilterNotNull__NameAssignment_2)
	{ after(grammarAccess.getFilterNotNullAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CompareQuali__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompareQuali__Group__0__Impl
	rule__CompareQuali__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareQuali__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompareQualiAccess().getComparisonColumnsWithStringKeyword_0()); }
	'ComparisonColumnsWithString'
	{ after(grammarAccess.getCompareQualiAccess().getComparisonColumnsWithStringKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareQuali__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompareQuali__Group__1__Impl
	rule__CompareQuali__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareQuali__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompareQualiAccess().getNameAssignment_1()); }
	(rule__CompareQuali__NameAssignment_1)
	{ after(grammarAccess.getCompareQualiAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareQuali__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompareQuali__Group__2__Impl
	rule__CompareQuali__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareQuali__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompareQualiAccess().getComparaisonAssignment_2()); }
	(rule__CompareQuali__ComparaisonAssignment_2)
	{ after(grammarAccess.getCompareQualiAccess().getComparaisonAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareQuali__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompareQuali__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareQuali__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompareQualiAccess().getSomethingtocompareAssignment_3()); }
	(rule__CompareQuali__SomethingtocompareAssignment_3)
	{ after(grammarAccess.getCompareQualiAccess().getSomethingtocompareAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CompareQuanti__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompareQuanti__Group__0__Impl
	rule__CompareQuanti__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareQuanti__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompareQuantiAccess().getComparisonColumnsWithNumberKeyword_0()); }
	'ComparisonColumnsWithNumber'
	{ after(grammarAccess.getCompareQuantiAccess().getComparisonColumnsWithNumberKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareQuanti__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompareQuanti__Group__1__Impl
	rule__CompareQuanti__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareQuanti__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompareQuantiAccess().getNameAssignment_1()); }
	(rule__CompareQuanti__NameAssignment_1)
	{ after(grammarAccess.getCompareQuantiAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareQuanti__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompareQuanti__Group__2__Impl
	rule__CompareQuanti__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareQuanti__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompareQuantiAccess().getComparaisonAssignment_2()); }
	(rule__CompareQuanti__ComparaisonAssignment_2)
	{ after(grammarAccess.getCompareQuantiAccess().getComparaisonAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareQuanti__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompareQuanti__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareQuanti__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompareQuantiAccess().getSomethingtocompareAssignment_3()); }
	(rule__CompareQuanti__SomethingtocompareAssignment_3)
	{ after(grammarAccess.getCompareQuantiAccess().getSomethingtocompareAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Dashboard__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDashboardAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getDashboardAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dashboard__OwnedGraphRealisationAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDashboardAccess().getOwnedGraphRealisationGraphRealisationParserRuleCall_3_0()); }
		ruleGraphRealisation
		{ after(grammarAccess.getDashboardAccess().getOwnedGraphRealisationGraphRealisationParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphRealisation__OwnedImportAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGraphRealisationAccess().getOwnedImportImportFileParserRuleCall_0_0()); }
		ruleImportFile
		{ after(grammarAccess.getGraphRealisationAccess().getOwnedImportImportFileParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphRealisation__OwnedGraphMakerAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGraphRealisationAccess().getOwnedGraphMakerGraphMakerParserRuleCall_1_0()); }
		ruleGraphMaker
		{ after(grammarAccess.getGraphRealisationAccess().getOwnedGraphMakerGraphMakerParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphRealisation__OwnedFilterAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGraphRealisationAccess().getOwnedFilterFilterDataParserRuleCall_2_0()); }
		ruleFilterData
		{ after(grammarAccess.getGraphRealisationAccess().getOwnedFilterFilterDataParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphRealisation__OwnedGraphUpdateAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGraphRealisationAccess().getOwnedGraphUpdateGraphUpdateParserRuleCall_3_0()); }
		ruleGraphUpdate
		{ after(grammarAccess.getGraphRealisationAccess().getOwnedGraphUpdateGraphUpdateParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportFile__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportFileAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getImportFileAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportFile__DelimeterAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportFileAccess().getDelimeterEStringParserRuleCall_5_0()); }
		ruleEString
		{ after(grammarAccess.getImportFileAccess().getDelimeterEStringParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphMaker__TypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGraphMakerAccess().getTypeTypeGraphEnumRuleCall_2_0()); }
		ruleTypeGraph
		{ after(grammarAccess.getGraphMakerAccess().getTypeTypeGraphEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphMaker__NameAbscisseAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGraphMakerAccess().getNameAbscisseEStringParserRuleCall_5_0()); }
		ruleEString
		{ after(grammarAccess.getGraphMakerAccess().getNameAbscisseEStringParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GraphMaker__NameOrdonneesAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGraphMakerAccess().getNameOrdonneesEStringParserRuleCall_8_0()); }
		ruleEString
		{ after(grammarAccess.getGraphMakerAccess().getNameOrdonneesEStringParserRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateCouleurGraph__CouleurAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUpdateCouleurGraphAccess().getCouleurEStringParserRuleCall_3_0()); }
		ruleEString
		{ after(grammarAccess.getUpdateCouleurGraphAccess().getCouleurEStringParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateNameLegend__OldnameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUpdateNameLegendAccess().getOldnameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getUpdateNameLegendAccess().getOldnameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateNameLegend__NewnameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUpdateNameLegendAccess().getNewnameEStringParserRuleCall_3_0()); }
		ruleEString
		{ after(grammarAccess.getUpdateNameLegendAccess().getNewnameEStringParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateNameAxeX__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUpdateNameAxeXAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getUpdateNameAxeXAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpdateNameAxeY__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUpdateNameAxeYAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getUpdateNameAxeYAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterGroupBy__NameColumnsYAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFilterGroupByAccess().getNameColumnsYEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getFilterGroupByAccess().getNameColumnsYEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterGroupBy__NameColumnsXAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFilterGroupByAccess().getNameColumnsXEStringParserRuleCall_3_0()); }
		ruleEString
		{ after(grammarAccess.getFilterGroupByAccess().getNameColumnsXEStringParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterGroupBy__FonctionAgregationAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFilterGroupByAccess().getFonctionAgregationFonctionAgregationEnumRuleCall_5_0()); }
		ruleFonctionAgregation
		{ after(grammarAccess.getFilterGroupByAccess().getFonctionAgregationFonctionAgregationEnumRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterNotNull__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFilterNotNullAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getFilterNotNullAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareQuali__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompareQualiAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getCompareQualiAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareQuali__ComparaisonAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompareQualiAccess().getComparaisonFonctionComparaisonQualiEnumRuleCall_2_0()); }
		ruleFonctionComparaisonQuali
		{ after(grammarAccess.getCompareQualiAccess().getComparaisonFonctionComparaisonQualiEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareQuali__SomethingtocompareAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompareQualiAccess().getSomethingtocompareEStringParserRuleCall_3_0()); }
		ruleEString
		{ after(grammarAccess.getCompareQualiAccess().getSomethingtocompareEStringParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareQuanti__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompareQuantiAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getCompareQuantiAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareQuanti__ComparaisonAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompareQuantiAccess().getComparaisonFonctionComparaisonQuantiEnumRuleCall_2_0()); }
		ruleFonctionComparaisonQuanti
		{ after(grammarAccess.getCompareQuantiAccess().getComparaisonFonctionComparaisonQuantiEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareQuanti__SomethingtocompareAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompareQuantiAccess().getSomethingtocompareEStringParserRuleCall_3_0()); }
		ruleEString
		{ after(grammarAccess.getCompareQuantiAccess().getSomethingtocompareEStringParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
