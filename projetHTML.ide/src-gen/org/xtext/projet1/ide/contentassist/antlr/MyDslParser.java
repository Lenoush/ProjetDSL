/*
 * generated by Xtext 2.25.0
 */
package org.xtext.projet1.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.projet1.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.projet1.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getGraphUpdateAccess().getAlternatives(), "rule__GraphUpdate__Alternatives");
			builder.put(grammarAccess.getFilterDataAccess().getAlternatives(), "rule__FilterData__Alternatives");
			builder.put(grammarAccess.getFilterCompareAccess().getAlternatives(), "rule__FilterCompare__Alternatives");
			builder.put(grammarAccess.getTypeGraphAccess().getAlternatives(), "rule__TypeGraph__Alternatives");
			builder.put(grammarAccess.getFonctionAgregationAccess().getAlternatives(), "rule__FonctionAgregation__Alternatives");
			builder.put(grammarAccess.getFonctionComparaisonQuantiAccess().getAlternatives(), "rule__FonctionComparaisonQuanti__Alternatives");
			builder.put(grammarAccess.getFonctionComparaisonQualiAccess().getAlternatives(), "rule__FonctionComparaisonQuali__Alternatives");
			builder.put(grammarAccess.getDashboardAccess().getGroup(), "rule__Dashboard__Group__0");
			builder.put(grammarAccess.getGraphRealisationAccess().getGroup(), "rule__GraphRealisation__Group__0");
			builder.put(grammarAccess.getImportFileAccess().getGroup(), "rule__ImportFile__Group__0");
			builder.put(grammarAccess.getGraphMakerAccess().getGroup(), "rule__GraphMaker__Group__0");
			builder.put(grammarAccess.getUpdateCouleurGraphAccess().getGroup(), "rule__UpdateCouleurGraph__Group__0");
			builder.put(grammarAccess.getUpdateNameLegendAccess().getGroup(), "rule__UpdateNameLegend__Group__0");
			builder.put(grammarAccess.getUpdateNameAxeXAccess().getGroup(), "rule__UpdateNameAxeX__Group__0");
			builder.put(grammarAccess.getUpdateNameAxeYAccess().getGroup(), "rule__UpdateNameAxeY__Group__0");
			builder.put(grammarAccess.getFilterGroupByAccess().getGroup(), "rule__FilterGroupBy__Group__0");
			builder.put(grammarAccess.getFilterNotNullAccess().getGroup(), "rule__FilterNotNull__Group__0");
			builder.put(grammarAccess.getCompareQualiAccess().getGroup(), "rule__CompareQuali__Group__0");
			builder.put(grammarAccess.getCompareQuantiAccess().getGroup(), "rule__CompareQuanti__Group__0");
			builder.put(grammarAccess.getDashboardAccess().getNameAssignment_2(), "rule__Dashboard__NameAssignment_2");
			builder.put(grammarAccess.getDashboardAccess().getOwnedGraphRealisationAssignment_3(), "rule__Dashboard__OwnedGraphRealisationAssignment_3");
			builder.put(grammarAccess.getGraphRealisationAccess().getOwnedImportAssignment_0(), "rule__GraphRealisation__OwnedImportAssignment_0");
			builder.put(grammarAccess.getGraphRealisationAccess().getOwnedGraphMakerAssignment_1(), "rule__GraphRealisation__OwnedGraphMakerAssignment_1");
			builder.put(grammarAccess.getGraphRealisationAccess().getOwnedFilterAssignment_2(), "rule__GraphRealisation__OwnedFilterAssignment_2");
			builder.put(grammarAccess.getGraphRealisationAccess().getOwnedGraphUpdateAssignment_3(), "rule__GraphRealisation__OwnedGraphUpdateAssignment_3");
			builder.put(grammarAccess.getImportFileAccess().getNameAssignment_2(), "rule__ImportFile__NameAssignment_2");
			builder.put(grammarAccess.getImportFileAccess().getDelimeterAssignment_5(), "rule__ImportFile__DelimeterAssignment_5");
			builder.put(grammarAccess.getGraphMakerAccess().getTypeAssignment_2(), "rule__GraphMaker__TypeAssignment_2");
			builder.put(grammarAccess.getGraphMakerAccess().getNameAbscisseAssignment_5(), "rule__GraphMaker__NameAbscisseAssignment_5");
			builder.put(grammarAccess.getGraphMakerAccess().getNameOrdonneesAssignment_8(), "rule__GraphMaker__NameOrdonneesAssignment_8");
			builder.put(grammarAccess.getUpdateCouleurGraphAccess().getCouleurAssignment_3(), "rule__UpdateCouleurGraph__CouleurAssignment_3");
			builder.put(grammarAccess.getUpdateNameLegendAccess().getOldnameAssignment_1(), "rule__UpdateNameLegend__OldnameAssignment_1");
			builder.put(grammarAccess.getUpdateNameLegendAccess().getNewnameAssignment_3(), "rule__UpdateNameLegend__NewnameAssignment_3");
			builder.put(grammarAccess.getUpdateNameAxeXAccess().getNameAssignment_2(), "rule__UpdateNameAxeX__NameAssignment_2");
			builder.put(grammarAccess.getUpdateNameAxeYAccess().getNameAssignment_2(), "rule__UpdateNameAxeY__NameAssignment_2");
			builder.put(grammarAccess.getFilterGroupByAccess().getNameColumnsYAssignment_1(), "rule__FilterGroupBy__NameColumnsYAssignment_1");
			builder.put(grammarAccess.getFilterGroupByAccess().getNameColumnsXAssignment_3(), "rule__FilterGroupBy__NameColumnsXAssignment_3");
			builder.put(grammarAccess.getFilterGroupByAccess().getFonctionAgregationAssignment_5(), "rule__FilterGroupBy__FonctionAgregationAssignment_5");
			builder.put(grammarAccess.getFilterNotNullAccess().getNameAssignment_2(), "rule__FilterNotNull__NameAssignment_2");
			builder.put(grammarAccess.getCompareQualiAccess().getNameAssignment_1(), "rule__CompareQuali__NameAssignment_1");
			builder.put(grammarAccess.getCompareQualiAccess().getComparaisonAssignment_2(), "rule__CompareQuali__ComparaisonAssignment_2");
			builder.put(grammarAccess.getCompareQualiAccess().getSomethingtocompareAssignment_3(), "rule__CompareQuali__SomethingtocompareAssignment_3");
			builder.put(grammarAccess.getCompareQuantiAccess().getNameAssignment_1(), "rule__CompareQuanti__NameAssignment_1");
			builder.put(grammarAccess.getCompareQuantiAccess().getComparaisonAssignment_2(), "rule__CompareQuanti__ComparaisonAssignment_2");
			builder.put(grammarAccess.getCompareQuantiAccess().getSomethingtocompareAssignment_3(), "rule__CompareQuanti__SomethingtocompareAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
